// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.birchavenue.startrack


case class ExtLocationDetailsType(suburb: String,
  postCode: String,
  state: String)


case class LocationDetailsType(locationStandard: org.birchavenue.startrack.LocationStandardEnum,
  suburb: Option[String] = None,
  postCode: Option[String] = None,
  state: Option[String] = None)


case class ScanModeHeaderType(scanModeType: org.birchavenue.startrack.ScanModeTypeEnum,
  scanMode: Option[String] = None)


case class TransactionHeaderType(source: String,
  accountNo: BigInt,
  userAccessKey: String,
  userId: Option[String] = None,
  transactionId: Option[String] = None,
  transactionDatetime: Option[javax.xml.datatype.XMLGregorianCalendar] = None)


case class TransitStateHeaderType(transitStateType: org.birchavenue.startrack.TransitStateTypeEnum,
  transitStateName: Option[String] = None)


case class AddressComplex(id: Option[String] = None,
  addressLine: Seq[String] = Nil,
  suburbOrLocation: Option[String] = None,
  state: Option[String] = None,
  postCode: Option[String] = None,
  country: Option[String] = None,
  deliveryPoint: Option[org.birchavenue.startrack.DelliveryPointComplex] = None)


case class AdvancedConsignmentSearchComplext(consignmentType: Option[String] = None,
  despatchDateToday: Option[Boolean] = None,
  despatchDateYesterday: Option[Boolean] = None,
  despatchDateFrom: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  despatchDateTo: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  etaDateFrom: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  etaDateTo: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  deliveryDateFrom: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  deliveryDateTo: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  etaDateDateToday: Option[Boolean] = None,
  etaDateDateYesterday: Option[Boolean] = None,
  deliveryDateToday: Option[Boolean] = None,
  deliveryDateYesterday: Option[Boolean] = None)


case class BusinessTransaction(Id: Option[String] = None,
  IdQualifier: Option[String] = None)


case class CarrierComplex(carrierCode: Option[String] = None,
  lock_seq: Option[String] = None)


case class ClaimDefinitionComplex(claimArea: Option[String] = None,
  claimCategory: Option[String] = None,
  targetSystem: Option[String] = None,
  claimDefinitionId: Option[String] = None,
  consignmentIdRequired: Option[Boolean] = None)

trait ClaimResponseMethod

object ClaimResponseMethod {
  def fromString(value: String): ClaimResponseMethod = value match {
    case "EMAIL" => EMAILValue2
    case "FAX" => FAXValue

  }
}

case object EMAILValue2 extends ClaimResponseMethod { override def toString = "EMAIL" }
case object FAXValue extends ClaimResponseMethod { override def toString = "FAX" }


case class ConnoteTransitStateComplex(connoteTransitState: Option[String] = None,
  connoteTransitStateDesc: Option[String] = None)


case class ContactDetailsComplex(emailAddress: Option[String] = None,
  phoneNumber: Option[String] = None,
  mobileNumber: Option[String] = None,
  faxNumber: Option[String] = None,
  address: Option[org.birchavenue.startrack.AddressComplex] = None)


case class CustomerDefinedRefValues(name: Option[String] = None,
  value: Option[String] = None,
  referenceOrder: Option[BigInt] = None,
  printOnConntoe: Option[Boolean] = None)


case class CustomerDefinedRefs(name: Option[String] = None,
  isMandatory: Option[Boolean] = None,
  referenceOrder: Option[BigInt] = None,
  printOnConnote: Option[Boolean] = None)


case class DelliveryPointComplex(dpId: Option[String] = None,
  longitude: Option[String] = None,
  latitude: Option[String] = None)


trait DepotCutOffTimeComplexable {
  val depotCode: Option[String]
  val depotName: Option[String]
  val airBookingCutOff: Option[javax.xml.datatype.XMLGregorianCalendar]
  val roadBookingCutOff: Option[javax.xml.datatype.XMLGregorianCalendar]
  val airPickupCutOff: Option[javax.xml.datatype.XMLGregorianCalendar]
  val roadPickupCutOff: Option[javax.xml.datatype.XMLGregorianCalendar]
}


case class DepotCutOffTimeComplex(depotCode: Option[String] = None,
  depotName: Option[String] = None,
  airBookingCutOff: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  roadBookingCutOff: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  airPickupCutOff: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  roadPickupCutOff: Option[javax.xml.datatype.XMLGregorianCalendar] = None) extends DepotCutOffTimeComplexable


case class DespatchFreightPreferences(defaultSenderAccount: Option[org.birchavenue.startrack.AccountType] = None,
  defaultCarrier: Option[String] = None,
  defaultPackagingType: Option[org.birchavenue.startrack.PackagingType] = None,
  defaultAutoConfirm: Option[Boolean] = None,
  defaultPrintSecondaryLabel: Option[Boolean] = None,
  defaultBookinDelivery: Option[Boolean] = None,
  defaultNotifyReceiver: Option[Boolean] = None,
  defaultPayerType: Option[String] = None,
  defaultUpdateReceiverList: Option[Boolean] = None,
  defaultRequestService: Option[Boolean] = None,
  defaultUseReceiverGroup: Option[Boolean] = None,
  defaultSMSAlertAtDelivery: Option[Boolean] = None,
  defaultAutoPrintLabels: Option[Boolean] = None,
  defaultAutoConsolidate: Option[Boolean] = None,
  defaultConsolidateOnRef: Option[Boolean] = None,
  defaultService: Option[String] = None)


case class DespatchType(despatchId: Option[String] = None,
  cutOffTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None)


case class EnquiryDefinitionComplex(enquiryArea: Option[String] = None,
  enquiryCategory: Option[String] = None,
  recipientEmailAddress: Seq[String] = Nil,
  targetSystem: Option[String] = None,
  requiresAuthentication: Option[Boolean] = None,
  enquiryDefinitionId: Option[String] = None,
  consignmentIdRequired: Option[Boolean] = None)

trait EnquiryResponseMethod

object EnquiryResponseMethod {
  def fromString(value: String): EnquiryResponseMethod = value match {
    case "PHONE" => PHONE
    case "EMAIL" => EMAILValue
    case "FAX" => FAX

  }
}

case object PHONE extends EnquiryResponseMethod { override def toString = "PHONE" }
case object EMAILValue extends EnquiryResponseMethod { override def toString = "EMAIL" }
case object FAX extends EnquiryResponseMethod { override def toString = "FAX" }


case class FaultType(code: Option[String] = None,
  category: Option[String] = None,
  severity: Option[String] = None,
  timestamp: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  message: Option[String] = None,
  technicalContext: Option[org.birchavenue.startrack.TechnicalContext] = None,
  businessTransaction: Seq[org.birchavenue.startrack.BusinessTransaction] = Nil,
  faultPayload: Seq[org.birchavenue.startrack.FaultPayload] = Nil,
  faultContext: Seq[org.birchavenue.startrack.FaultContext] = Nil)

trait FaultCategoryType

object FaultCategoryType {
  def fromString(value: String): FaultCategoryType = value match {
    case "LOGICAL" => LOGICAL
    case "TECHNICAL" => TECHNICAL

  }
}

case object LOGICAL extends FaultCategoryType { override def toString = "LOGICAL" }
case object TECHNICAL extends FaultCategoryType { override def toString = "TECHNICAL" }


case class FaultContext(name: Option[String] = None,
  value: Option[String] = None)


case class FaultPayload(qualifier: Option[String] = None,
  payload: Option[String] = None)

trait FaultSeverityType

object FaultSeverityType {
  def fromString(value: String): FaultSeverityType = value match {
    case "ERROR" => ERROR
    case "WARN" => WARN

  }
}

case object ERROR extends FaultSeverityType { override def toString = "ERROR" }
case object WARN extends FaultSeverityType { override def toString = "WARN" }


case class FreightTrackingPreferencesComplex(freighttrackingpreferencescomplexsequence1: org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence1,
  freighttrackingpreferencescomplexsequence2: org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence2,
  freighttrackingpreferencescomplexsequence3: org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence3) {
  lazy val trackingFavouriteId = freighttrackingpreferencescomplexsequence1.trackingFavouriteId
  lazy val isDefault = freighttrackingpreferencescomplexsequence1.isDefault
  lazy val consignmentId = freighttrackingpreferencescomplexsequence1.consignmentId
  lazy val referenceNumber = freighttrackingpreferencescomplexsequence1.referenceNumber
  lazy val despatchDateFrom = freighttrackingpreferencescomplexsequence1.despatchDateFrom
  lazy val despatchDateTo = freighttrackingpreferencescomplexsequence1.despatchDateTo
  lazy val despatchDateYesterday = freighttrackingpreferencescomplexsequence1.despatchDateYesterday
  lazy val etaDateFrom = freighttrackingpreferencescomplexsequence1.etaDateFrom
  lazy val etaDateTo = freighttrackingpreferencescomplexsequence1.etaDateTo
  lazy val etaDateToday = freighttrackingpreferencescomplexsequence1.etaDateToday
  lazy val deliveryDateFrom = freighttrackingpreferencescomplexsequence2.deliveryDateFrom
  lazy val deliveryDateTo = freighttrackingpreferencescomplexsequence2.deliveryDateTo
  lazy val deliveryDateToday = freighttrackingpreferencescomplexsequence2.deliveryDateToday
  lazy val consignmentType = freighttrackingpreferencescomplexsequence2.consignmentType
  lazy val serviceCode = freighttrackingpreferencescomplexsequence2.serviceCode
  lazy val consignmentStatus = freighttrackingpreferencescomplexsequence2.consignmentStatus
  lazy val accountNumber = freighttrackingpreferencescomplexsequence2.accountNumber
  lazy val despatchId = freighttrackingpreferencescomplexsequence2.despatchId
  lazy val receiverName = freighttrackingpreferencescomplexsequence2.receiverName
  lazy val receiverState = freighttrackingpreferencescomplexsequence2.receiverState
  lazy val receiverSuburb = freighttrackingpreferencescomplexsequence3.receiverSuburb
  lazy val receiverPostCode = freighttrackingpreferencescomplexsequence3.receiverPostCode
  lazy val senderName = freighttrackingpreferencescomplexsequence3.senderName
  lazy val senderState = freighttrackingpreferencescomplexsequence3.senderState
  lazy val senderSuburb = freighttrackingpreferencescomplexsequence3.senderSuburb
  lazy val senderPostCode = freighttrackingpreferencescomplexsequence3.senderPostCode
  lazy val advancedConsignmentType = freighttrackingpreferencescomplexsequence3.advancedConsignmentType
}


case class FreightTrackingPreferencesComplexSequence1(trackingFavouriteId: Option[String] = None,
  isDefault: Option[Boolean] = None,
  consignmentId: Option[String] = None,
  referenceNumber: Option[String] = None,
  despatchDateFrom: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  despatchDateTo: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  despatchDateYesterday: Option[Boolean] = None,
  etaDateFrom: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  etaDateTo: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  etaDateToday: Option[Boolean] = None)

case class FreightTrackingPreferencesComplexSequence2(deliveryDateFrom: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  deliveryDateTo: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  deliveryDateToday: Option[Boolean] = None,
  consignmentType: Option[String] = None,
  serviceCode: Option[String] = None,
  consignmentStatus: Option[String] = None,
  accountNumber: Option[BigInt] = None,
  despatchId: Option[String] = None,
  receiverName: Option[String] = None,
  receiverState: Option[String] = None)

case class FreightTrackingPreferencesComplexSequence3(receiverSuburb: Option[String] = None,
  receiverPostCode: Option[BigInt] = None,
  senderName: Option[String] = None,
  senderState: Option[String] = None,
  senderSuburb: Option[String] = None,
  senderPostCode: Option[BigInt] = None,
  advancedConsignmentType: Option[org.birchavenue.startrack.AdvancedConsignmentSearchComplext] = None)

trait HotListNotificationMethod

object HotListNotificationMethod {
  def fromString(value: String): HotListNotificationMethod = value match {
    case "SMS" => SMS
    case "EMAIL" => EMAIL

  }
}

case object SMS extends HotListNotificationMethod { override def toString = "SMS" }
case object EMAIL extends HotListNotificationMethod { override def toString = "EMAIL" }


case class LocationCutoffTimeComplex(serviceCode: String,
  suburbName: String,
  postCode: String,
  nearestDepotCode: String,
  regularCutoffTime: javax.xml.datatype.XMLGregorianCalendar,
  oversizeCutoffTime: javax.xml.datatype.XMLGregorianCalendar,
  lateCutOffTime: javax.xml.datatype.XMLGregorianCalendar,
  localTimezone: String,
  lateSurcharge: BigDecimal,
  auspostLodgement: Option[Boolean] = None,
  agentLodgement: Option[Boolean] = None,
  oversizeDimension: Option[BigInt] = None,
  oversizeWeight: Option[BigDecimal] = None,
  maxDimension: Option[BigInt] = None,
  maxWeight: Option[BigDecimal] = None,
  nextBusinessDay: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  currentTimeAtLocation: Option[javax.xml.datatype.XMLGregorianCalendar] = None)

trait LocationStandardEnum

object LocationStandardEnum {
  def fromString(value: String): LocationStandardEnum = value match {
    case "TEAM" => TEAM
    case "AUS-POST" => AUSPOST

  }
}

case object TEAM extends LocationStandardEnum { override def toString = "TEAM" }
case object AUSPOST extends LocationStandardEnum { override def toString = "AUS-POST" }


case class MatchedAddressComplex(id: Option[String] = None,
  addressLine: Seq[String] = Nil,
  suburbOrLocation: Option[String] = None,
  state: Option[String] = None,
  postCode: Option[BigInt] = None,
  country: Option[String] = None,
  deliveryPoint: Option[org.birchavenue.startrack.DelliveryPointComplex] = None)

trait OpCodeEnum

object OpCodeEnum {
  def fromString(value: String): OpCodeEnum = value match {
    case "INSERT" => INSERT
    case "UPDATE" => UPDATE
    case "DELETE" => DELETE

  }
}

case object INSERT extends OpCodeEnum { override def toString = "INSERT" }
case object UPDATE extends OpCodeEnum { override def toString = "UPDATE" }
case object DELETE extends OpCodeEnum { override def toString = "DELETE" }


case class PackagingType(unitType: Option[String] = None,
  name: Option[String] = None,
  height: Option[BigInt] = None,
  weight: Option[BigInt] = None,
  length: Option[BigInt] = None,
  width: Option[BigInt] = None,
  description: Option[String] = None)


case class PaginationType(maxRows: BigInt,
  availableRows: BigInt,
  firstRow: BigInt)


case class PickupBookingPrefsComplex(defaultService: Option[String] = None,
  defaultPickupLocation: Option[org.birchavenue.startrack.PickupLocationComplex] = None,
  defaultUpdatePickupLocationList: Option[Boolean] = None)


case class PickupLocationComplex(index: Option[String] = None,
  pickupCompanyName: Option[String] = None,
  pickupContact: Option[String] = None,
  pickupAddress: Option[org.birchavenue.startrack.AddressComplex] = None,
  pickupPhoneNumber: Option[String] = None,
  pickupEmailAddress: Option[String] = None,
  pickupPoint: Option[String] = None,
  closingTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  airCutoffTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  roadCutoffTime: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  nearestDepotCode: Option[String] = None,
  regularPickup: Option[Boolean] = None)


case class ReceiverGroup(name: Option[String] = None,
  receiver: Option[org.birchavenue.startrack.ReceiverTypeType2] = None)

trait ScanModeTypeEnum

object ScanModeTypeEnum {
  def fromString(value: String): ScanModeTypeEnum = value match {
    case "CONSIGNMENT" => CONSIGNMENTValue2
    case "FREIGHTITEM" => FREIGHTITEMValue2

  }
}

case object CONSIGNMENTValue2 extends ScanModeTypeEnum { override def toString = "CONSIGNMENT" }
case object FREIGHTITEMValue2 extends ScanModeTypeEnum { override def toString = "FREIGHTITEM" }


trait ServiceCodeComplexable {
  val serviceCode: Option[String]
  val serviceDescription: Option[String]
  val serviceClass: Option[String]
  val serviceType: Option[String]
  val serviceRank: Option[BigInt]
  val publiclyViewable: Option[Boolean]
  val isDefault: Option[Boolean]
  val sortOrder: Option[BigInt]
  val transportType: Option[String]
  val tLabelText: Option[String]
  val fastServiceCode: Option[String]
  val newProduct: Option[Boolean]
  val applicability: Option[String]
}


case class ServiceCodeComplex(serviceCode: Option[String] = None,
  serviceDescription: Option[String] = None,
  serviceClass: Option[String] = None,
  serviceType: Option[String] = None,
  serviceRank: Option[BigInt] = None,
  publiclyViewable: Option[Boolean] = None,
  isDefault: Option[Boolean] = None,
  sortOrder: Option[BigInt] = None,
  transportType: Option[String] = None,
  tLabelText: Option[String] = None,
  fastServiceCode: Option[String] = None,
  newProduct: Option[Boolean] = None,
  applicability: Option[String] = None) extends ServiceCodeComplexable

trait ServiceTypeEnum

object ServiceTypeEnum {
  def fromString(value: String): ServiceTypeEnum = value match {
    case "Road" => Road
    case "Air" => Air
    case "Special" => Special

  }
}

case object Road extends ServiceTypeEnum { override def toString = "Road" }
case object Air extends ServiceTypeEnum { override def toString = "Air" }
case object Special extends ServiceTypeEnum { override def toString = "Special" }


case class TechnicalContext(logicalComponentId: Option[String] = None,
  physicalComponentId: Option[String] = None,
  system: Option[String] = None,
  correlationId: Option[String] = None)


case class Tp_TransactionHeaderType(source: String,
  userAccessKey: String,
  userId: Option[String] = None,
  transactionId: Option[String] = None,
  transactionDatetime: Option[javax.xml.datatype.XMLGregorianCalendar] = None)

trait TrackingTypeEnum

object TrackingTypeEnum {
  def fromString(value: String): TrackingTypeEnum = value match {
    case "CONSIGNMENT" => CONSIGNMENTValue
    case "FREIGHTITEM" => FREIGHTITEMValue

  }
}

case object CONSIGNMENTValue extends TrackingTypeEnum { override def toString = "CONSIGNMENT" }
case object FREIGHTITEMValue extends TrackingTypeEnum { override def toString = "FREIGHTITEM" }

trait TransitStateTypeEnum

object TransitStateTypeEnum {
  def fromString(value: String): TransitStateTypeEnum = value match {
    case "CONSIGNMENT" => CONSIGNMENT
    case "FREIGHTITEM" => FREIGHTITEM

  }
}

case object CONSIGNMENT extends TransitStateTypeEnum { override def toString = "CONSIGNMENT" }
case object FREIGHTITEM extends TransitStateTypeEnum { override def toString = "FREIGHTITEM" }


case class UpdateDepotCutOffTimeComplex(depotCode: String,
  airBookingCutOff: javax.xml.datatype.XMLGregorianCalendar,
  roadBookingCutOff: javax.xml.datatype.XMLGregorianCalendar,
  airPickupCutOff: javax.xml.datatype.XMLGregorianCalendar,
  roadPickupCutOff: javax.xml.datatype.XMLGregorianCalendar)


case class Fault2(fault: Option[org.birchavenue.startrack.FaultType] = None)

