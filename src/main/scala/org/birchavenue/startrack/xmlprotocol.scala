// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.birchavenue.startrack
    
/**
usage:
val obj = scalaxb.fromXML[org.birchavenue.startrack.Foo](node)
val document = scalaxb.toXML[org.birchavenue.startrack.Foo](obj, "foo", org.birchavenue.startrack.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://startrack.com.au/ESB/Services/Concrete/External/Services/v1",
    Some("ns0") -> "http://startrackexpress/Common/actions/externals/MasterData/v1",
    Some("ns1") -> "http://startrackexpress/Common/externals/Faultv1",
    Some("ns10") -> "http://startrackexpress/Common/Account/v1",
    Some("ns11") -> "http://startrackexpress/Common/Imaging/v1",
    Some("ns2") -> "http://startrackexpress/Common/actions/externals/Booking/v1",
    Some("ns3") -> "http://startrackexpress/Common/actions/externals/FreightCalculation/v1",
    Some("ns4") -> "http://startrackexpress/Common/actions/externals/Consignment/v1",
    Some("ns6") -> "http://startrackexpress/Common/FreightDespatching/v1",
    Some("ns7") -> "http://startrackexpress/Common/FreightProcessing/v1",
    Some("ns8") -> "http://startrackexpress/Common/MasterData/v1",
    Some("ns9") -> "http://startrackexpress/Common/Booking/v1",
    Some("prim") -> "http://startrackexpress/Common/Primitives/v1",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val StartrackFaultFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Fault] = new DefaultStartrackFaultFormat {}
  implicit lazy val StartrackExtLocationDetailsTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ExtLocationDetailsType] = new DefaultStartrackExtLocationDetailsTypeFormat {}
  implicit lazy val StartrackLocationDetailsTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.LocationDetailsType] = new DefaultStartrackLocationDetailsTypeFormat {}
  implicit lazy val StartrackScanModeHeaderTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ScanModeHeaderType] = new DefaultStartrackScanModeHeaderTypeFormat {}
  implicit lazy val StartrackTransactionHeaderTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TransactionHeaderType] = new DefaultStartrackTransactionHeaderTypeFormat {}
  implicit lazy val StartrackTransitStateHeaderTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TransitStateHeaderType] = new DefaultStartrackTransitStateHeaderTypeFormat {}
  implicit lazy val StartrackAddressComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.AddressComplex] = new DefaultStartrackAddressComplexFormat {}
  implicit lazy val StartrackAdvancedConsignmentSearchComplextFormat: scalaxb.XMLFormat[org.birchavenue.startrack.AdvancedConsignmentSearchComplext] = new DefaultStartrackAdvancedConsignmentSearchComplextFormat {}
  implicit lazy val StartrackBusinessTransactionFormat: scalaxb.XMLFormat[org.birchavenue.startrack.BusinessTransaction] = new DefaultStartrackBusinessTransactionFormat {}
  implicit lazy val StartrackCarrierComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CarrierComplex] = new DefaultStartrackCarrierComplexFormat {}
  implicit lazy val StartrackClaimDefinitionComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ClaimDefinitionComplex] = new DefaultStartrackClaimDefinitionComplexFormat {}
  implicit lazy val StartrackClaimResponseMethodFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ClaimResponseMethod] = new DefaultStartrackClaimResponseMethodFormat {}
  implicit lazy val StartrackConnoteTransitStateComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ConnoteTransitStateComplex] = new DefaultStartrackConnoteTransitStateComplexFormat {}
  implicit lazy val StartrackContactDetailsComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ContactDetailsComplex] = new DefaultStartrackContactDetailsComplexFormat {}
  implicit lazy val StartrackCustomerDefinedRefValuesFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CustomerDefinedRefValues] = new DefaultStartrackCustomerDefinedRefValuesFormat {}
  implicit lazy val StartrackCustomerDefinedRefsFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CustomerDefinedRefs] = new DefaultStartrackCustomerDefinedRefsFormat {}
  implicit lazy val StartrackDelliveryPointComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DelliveryPointComplex] = new DefaultStartrackDelliveryPointComplexFormat {}
  implicit lazy val StartrackDepotCutOffTimeComplexableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DepotCutOffTimeComplexable] = new DefaultStartrackDepotCutOffTimeComplexableFormat {}
  implicit lazy val StartrackDepotCutOffTimeComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DepotCutOffTimeComplex] = new DefaultStartrackDepotCutOffTimeComplexFormat {}
  implicit lazy val StartrackDespatchFreightPreferencesFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DespatchFreightPreferences] = new DefaultStartrackDespatchFreightPreferencesFormat {}
  implicit lazy val StartrackDespatchTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DespatchType] = new DefaultStartrackDespatchTypeFormat {}
  implicit lazy val StartrackEnquiryDefinitionComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.EnquiryDefinitionComplex] = new DefaultStartrackEnquiryDefinitionComplexFormat {}
  implicit lazy val StartrackEnquiryResponseMethodFormat: scalaxb.XMLFormat[org.birchavenue.startrack.EnquiryResponseMethod] = new DefaultStartrackEnquiryResponseMethodFormat {}
  implicit lazy val StartrackFaultTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FaultType] = new DefaultStartrackFaultTypeFormat {}
  implicit lazy val StartrackFaultCategoryTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FaultCategoryType] = new DefaultStartrackFaultCategoryTypeFormat {}
  implicit lazy val StartrackFaultContextFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FaultContext] = new DefaultStartrackFaultContextFormat {}
  implicit lazy val StartrackFaultPayloadFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FaultPayload] = new DefaultStartrackFaultPayloadFormat {}
  implicit lazy val StartrackFaultSeverityTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FaultSeverityType] = new DefaultStartrackFaultSeverityTypeFormat {}
  implicit lazy val StartrackFreightTrackingPreferencesComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FreightTrackingPreferencesComplex] = new DefaultStartrackFreightTrackingPreferencesComplexFormat {}
  implicit lazy val StartrackFreightTrackingPreferencesComplexSequence1Format: scalaxb.XMLFormat[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence1] = new DefaultStartrackFreightTrackingPreferencesComplexSequence1Format {}
  implicit lazy val StartrackFreightTrackingPreferencesComplexSequence2Format: scalaxb.XMLFormat[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence2] = new DefaultStartrackFreightTrackingPreferencesComplexSequence2Format {}
  implicit lazy val StartrackFreightTrackingPreferencesComplexSequence3Format: scalaxb.XMLFormat[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence3] = new DefaultStartrackFreightTrackingPreferencesComplexSequence3Format {}
  implicit lazy val StartrackHotListNotificationMethodFormat: scalaxb.XMLFormat[org.birchavenue.startrack.HotListNotificationMethod] = new DefaultStartrackHotListNotificationMethodFormat {}
  implicit lazy val StartrackLocationCutoffTimeComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.LocationCutoffTimeComplex] = new DefaultStartrackLocationCutoffTimeComplexFormat {}
  implicit lazy val StartrackLocationStandardEnumFormat: scalaxb.XMLFormat[org.birchavenue.startrack.LocationStandardEnum] = new DefaultStartrackLocationStandardEnumFormat {}
  implicit lazy val StartrackMatchedAddressComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.MatchedAddressComplex] = new DefaultStartrackMatchedAddressComplexFormat {}
  implicit lazy val StartrackOpCodeEnumFormat: scalaxb.XMLFormat[org.birchavenue.startrack.OpCodeEnum] = new DefaultStartrackOpCodeEnumFormat {}
  implicit lazy val StartrackPackagingTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PackagingType] = new DefaultStartrackPackagingTypeFormat {}
  implicit lazy val StartrackPaginationTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PaginationType] = new DefaultStartrackPaginationTypeFormat {}
  implicit lazy val StartrackPickupBookingPrefsComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupBookingPrefsComplex] = new DefaultStartrackPickupBookingPrefsComplexFormat {}
  implicit lazy val StartrackPickupLocationComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupLocationComplex] = new DefaultStartrackPickupLocationComplexFormat {}
  implicit lazy val StartrackReceiverGroupFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ReceiverGroup] = new DefaultStartrackReceiverGroupFormat {}
  implicit lazy val StartrackScanModeTypeEnumFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ScanModeTypeEnum] = new DefaultStartrackScanModeTypeEnumFormat {}
  implicit lazy val StartrackServiceCodeComplexableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ServiceCodeComplexable] = new DefaultStartrackServiceCodeComplexableFormat {}
  implicit lazy val StartrackServiceCodeComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ServiceCodeComplex] = new DefaultStartrackServiceCodeComplexFormat {}
  implicit lazy val StartrackServiceTypeEnumFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ServiceTypeEnum] = new DefaultStartrackServiceTypeEnumFormat {}
  implicit lazy val StartrackTechnicalContextFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TechnicalContext] = new DefaultStartrackTechnicalContextFormat {}
  implicit lazy val StartrackTp_TransactionHeaderTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_TransactionHeaderType] = new DefaultStartrackTp_TransactionHeaderTypeFormat {}
  implicit lazy val StartrackTrackingTypeEnumFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TrackingTypeEnum] = new DefaultStartrackTrackingTypeEnumFormat {}
  implicit lazy val StartrackTransitStateTypeEnumFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TransitStateTypeEnum] = new DefaultStartrackTransitStateTypeEnumFormat {}
  implicit lazy val StartrackUpdateDepotCutOffTimeComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UpdateDepotCutOffTimeComplex] = new DefaultStartrackUpdateDepotCutOffTimeComplexFormat {}
  implicit lazy val StartrackFault2Format: scalaxb.XMLFormat[org.birchavenue.startrack.Fault2] = new DefaultStartrackFault2Format {}
  implicit lazy val StartrackCreatePickupBookingRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CreatePickupBookingRequest] = new DefaultStartrackCreatePickupBookingRequestFormat {}
  implicit lazy val StartrackCreatePickupBookingResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CreatePickupBookingResponse] = new DefaultStartrackCreatePickupBookingResponseFormat {}
  implicit lazy val StartrackGetPickupCutoffTimesRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetPickupCutoffTimesRequest] = new DefaultStartrackGetPickupCutoffTimesRequestFormat {}
  implicit lazy val StartrackGetPickupCutoffTimesResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetPickupCutoffTimesResponse] = new DefaultStartrackGetPickupCutoffTimesResponseFormat {}
  implicit lazy val StartrackTp_createPickupBookingRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_createPickupBookingRequest] = new DefaultStartrackTp_createPickupBookingRequestFormat {}
  implicit lazy val StartrackTp_createPickupBookingResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_createPickupBookingResponse] = new DefaultStartrackTp_createPickupBookingResponseFormat {}
  implicit lazy val StartrackTp_getPickupCutoffTimesRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_getPickupCutoffTimesRequest] = new DefaultStartrackTp_getPickupCutoffTimesRequestFormat {}
  implicit lazy val StartrackTp_getPickupCutoffTimesResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_getPickupCutoffTimesResponse] = new DefaultStartrackTp_getPickupCutoffTimesResponseFormat {}
  implicit lazy val StartrackPODTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PODType] = new DefaultStartrackPODTypeFormat {}
  implicit lazy val StartrackDangerousGoodsTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DangerousGoodsType] = new DefaultStartrackDangerousGoodsTypeFormat {}
  implicit lazy val StartrackDespatchOptionsTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DespatchOptionsType] = new DefaultStartrackDespatchOptionsTypeFormat {}
  implicit lazy val StartrackDespatchTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DespatchTypeType] = new DefaultStartrackDespatchTypeTypeFormat {}
  implicit lazy val StartrackFreightItemTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FreightItemType] = new DefaultStartrackFreightItemTypeFormat {}
  implicit lazy val StartrackImageTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ImageType] = new DefaultStartrackImageTypeFormat {}
  implicit lazy val StartrackLineItemTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.LineItemType] = new DefaultStartrackLineItemTypeFormat {}
  implicit lazy val StartrackPickupBookingIdTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupBookingIdType] = new DefaultStartrackPickupBookingIdTypeFormat {}
  implicit lazy val StartrackPickupBookingTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupBookingType] = new DefaultStartrackPickupBookingTypeFormat {}
  implicit lazy val StartrackPickupDetailsTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupDetailsType] = new DefaultStartrackPickupDetailsTypeFormat {}
  implicit lazy val StartrackPickupFreightItemGroupFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupFreightItemGroup] = new DefaultStartrackPickupFreightItemGroupFormat {}
  implicit lazy val StartrackPickupFreightItemGroupTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupFreightItemGroupTypable] = new DefaultStartrackPickupFreightItemGroupTypableFormat {}
  implicit lazy val StartrackPickupFreightItemGroupTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupFreightItemGroupType] = new DefaultStartrackPickupFreightItemGroupTypeFormat {}
  implicit lazy val StartrackReceiverTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ReceiverType] = new DefaultStartrackReceiverTypeFormat {}
  implicit lazy val StartrackReferenceTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ReferenceType] = new DefaultStartrackReferenceTypeFormat {}
  implicit lazy val StartrackRequestorTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.RequestorType] = new DefaultStartrackRequestorTypeFormat {}
  implicit lazy val StartrackSenderTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.SenderType] = new DefaultStartrackSenderTypeFormat {}
  implicit lazy val StartrackTimeReadyTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TimeReadyType] = new DefaultStartrackTimeReadyTypeFormat {}
  implicit lazy val StartrackUpdateDangerousGoodsTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UpdateDangerousGoodsType] = new DefaultStartrackUpdateDangerousGoodsTypeFormat {}
  implicit lazy val StartrackUpdateDespatchTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UpdateDespatchType] = new DefaultStartrackUpdateDespatchTypeFormat {}
  implicit lazy val StartrackUpdateLineItemTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UpdateLineItemTypable] = new DefaultStartrackUpdateLineItemTypableFormat {}
  implicit lazy val StartrackUpdateLineItemTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UpdateLineItemType] = new DefaultStartrackUpdateLineItemTypeFormat {}
  implicit lazy val StartrackUpdateLineItemsFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UpdateLineItems] = new DefaultStartrackUpdateLineItemsFormat {}
  implicit lazy val StartrackUpdateReferenceTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UpdateReferenceType] = new DefaultStartrackUpdateReferenceTypeFormat {}
  implicit lazy val StartrackDGTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DGType] = new DefaultStartrackDGTypeFormat {}
  implicit lazy val StartrackPODTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PODTypeType] = new DefaultStartrackPODTypeTypeFormat {}
  implicit lazy val StartrackConsignmentTrackingEventTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ConsignmentTrackingEventType] = new DefaultStartrackConsignmentTrackingEventTypeFormat {}
  implicit lazy val StartrackConsignmentTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ConsignmentType] = new DefaultStartrackConsignmentTypeFormat {}
  implicit lazy val StartrackDangerousGoodsTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DangerousGoodsTypeType] = new DefaultStartrackDangerousGoodsTypeTypeFormat {}
  implicit lazy val StartrackDepotTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DepotType] = new DefaultStartrackDepotTypeFormat {}
  implicit lazy val StartrackFreightItemTrackingEventTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FreightItemTrackingEventType] = new DefaultStartrackFreightItemTrackingEventTypeFormat {}
  implicit lazy val StartrackFreightItemTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FreightItemTypeType] = new DefaultStartrackFreightItemTypeTypeFormat {}
  implicit lazy val StartrackImageTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ImageTypeType] = new DefaultStartrackImageTypeTypeFormat {}
  implicit lazy val StartrackLineItemTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.LineItemTypeType] = new DefaultStartrackLineItemTypeTypeFormat {}
  implicit lazy val StartrackPersonTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PersonType] = new DefaultStartrackPersonTypeFormat {}
  implicit lazy val StartrackPrintStatusTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PrintStatusType] = new DefaultStartrackPrintStatusTypeFormat {}
  implicit lazy val StartrackReceiverTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ReceiverTypeType] = new DefaultStartrackReceiverTypeTypeFormat {}
  implicit lazy val StartrackReferenceTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ReferenceTypeType] = new DefaultStartrackReferenceTypeTypeFormat {}
  implicit lazy val StartrackScannerTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ScannerType] = new DefaultStartrackScannerTypeFormat {}
  implicit lazy val StartrackSenderTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.SenderTypeType] = new DefaultStartrackSenderTypeTypeFormat {}
  implicit lazy val StartrackStatusHistoryTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.StatusHistoryType] = new DefaultStartrackStatusHistoryTypeFormat {}
  implicit lazy val StartrackTeamLocationTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TeamLocationType] = new DefaultStartrackTeamLocationTypeFormat {}
  implicit lazy val StartrackTrackingEventTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TrackingEventTypable] = new DefaultStartrackTrackingEventTypableFormat {}
  implicit lazy val StartrackTrackingEventTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TrackingEventType] = new DefaultStartrackTrackingEventTypeFormat {}
  implicit lazy val StartrackUserStatusHistoryTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UserStatusHistoryType] = new DefaultStartrackUserStatusHistoryTypeFormat {}
  implicit lazy val StartrackVehicleTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.VehicleType] = new DefaultStartrackVehicleTypeFormat {}
  implicit lazy val StartrackChoiceTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ChoiceType] = new DefaultStartrackChoiceTypeFormat {}
  implicit lazy val StartrackCalculateCostAndEstimatedTimeRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CalculateCostAndEstimatedTimeRequest] = new DefaultStartrackCalculateCostAndEstimatedTimeRequestFormat {}
  implicit lazy val StartrackCalculateCostAndEstimatedTimeResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CalculateCostAndEstimatedTimeResponse] = new DefaultStartrackCalculateCostAndEstimatedTimeResponseFormat {}
  implicit lazy val StartrackCalculateCostRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CalculateCostRequest] = new DefaultStartrackCalculateCostRequestFormat {}
  implicit lazy val StartrackCalculateCostResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CalculateCostResponse] = new DefaultStartrackCalculateCostResponseFormat {}
  implicit lazy val StartrackCalculateEstimatedTimeRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CalculateEstimatedTimeRequest] = new DefaultStartrackCalculateEstimatedTimeRequestFormat {}
  implicit lazy val StartrackCalculateEstimatedTimeResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CalculateEstimatedTimeResponse] = new DefaultStartrackCalculateEstimatedTimeResponseFormat {}
  implicit lazy val StartrackTp_calculateEstimatedTimeRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_calculateEstimatedTimeRequest] = new DefaultStartrackTp_calculateEstimatedTimeRequestFormat {}
  implicit lazy val StartrackDepotTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DepotTypable] = new DefaultStartrackDepotTypableFormat {}
  implicit lazy val StartrackDepotTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DepotTypeType] = new DefaultStartrackDepotTypeTypeFormat {}
  implicit lazy val StartrackFreightItemIncidentTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.FreightItemIncidentType] = new DefaultStartrackFreightItemIncidentTypeFormat {}
  implicit lazy val StartrackLocationTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.LocationTypable] = new DefaultStartrackLocationTypableFormat {}
  implicit lazy val StartrackLocationTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.LocationType] = new DefaultStartrackLocationTypeFormat {}
  implicit lazy val StartrackQCCodeTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.QCCodeTypable] = new DefaultStartrackQCCodeTypableFormat {}
  implicit lazy val StartrackQCCodeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.QCCodeType] = new DefaultStartrackQCCodeTypeFormat {}
  implicit lazy val StartrackScanModeTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ScanModeTypable] = new DefaultStartrackScanModeTypableFormat {}
  implicit lazy val StartrackScanModeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ScanModeType] = new DefaultStartrackScanModeTypeFormat {}
  implicit lazy val StartrackTransitStateTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TransitStateTypable] = new DefaultStartrackTransitStateTypableFormat {}
  implicit lazy val StartrackTransitStateTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TransitStateType] = new DefaultStartrackTransitStateTypeFormat {}
  implicit lazy val StartrackUnitTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.UnitTypeType] = new DefaultStartrackUnitTypeTypeFormat {}
  implicit lazy val StartrackDepotTypeType2Format: scalaxb.XMLFormat[org.birchavenue.startrack.DepotTypeType2] = new DefaultStartrackDepotTypeType2Format {}
  implicit lazy val StartrackGetDepotCutOffTimeComplexFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetDepotCutOffTimeComplex] = new DefaultStartrackGetDepotCutOffTimeComplexFormat {}
  implicit lazy val StartrackLocationTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.LocationTypeType] = new DefaultStartrackLocationTypeTypeFormat {}
  implicit lazy val StartrackQCCodeTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.QCCodeTypeType] = new DefaultStartrackQCCodeTypeTypeFormat {}
  implicit lazy val StartrackScanModeTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ScanModeTypeType] = new DefaultStartrackScanModeTypeTypeFormat {}
  implicit lazy val StartrackServiceCodeComplexTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ServiceCodeComplexType] = new DefaultStartrackServiceCodeComplexTypeFormat {}
  implicit lazy val StartrackSimpleLocationTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.SimpleLocationType] = new DefaultStartrackSimpleLocationTypeFormat {}
  implicit lazy val StartrackTransitStateTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.TransitStateTypeType] = new DefaultStartrackTransitStateTypeTypeFormat {}
  implicit lazy val StartrackGetDepotsRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetDepotsRequest] = new DefaultStartrackGetDepotsRequestFormat {}
  implicit lazy val StartrackGetDepotsResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetDepotsResponse] = new DefaultStartrackGetDepotsResponseFormat {}
  implicit lazy val StartrackGetLocationsRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetLocationsRequest] = new DefaultStartrackGetLocationsRequestFormat {}
  implicit lazy val StartrackGetLocationsResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetLocationsResponse] = new DefaultStartrackGetLocationsResponseFormat {}
  implicit lazy val StartrackGetNearestDepotRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetNearestDepotRequest] = new DefaultStartrackGetNearestDepotRequestFormat {}
  implicit lazy val StartrackGetNearestDepotResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetNearestDepotResponse] = new DefaultStartrackGetNearestDepotResponseFormat {}
  implicit lazy val StartrackGetQCCodesRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetQCCodesRequest] = new DefaultStartrackGetQCCodesRequestFormat {}
  implicit lazy val StartrackGetQCCodesResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetQCCodesResponse] = new DefaultStartrackGetQCCodesResponseFormat {}
  implicit lazy val StartrackGetServiceCodesRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetServiceCodesRequest] = new DefaultStartrackGetServiceCodesRequestFormat {}
  implicit lazy val StartrackGetServiceCodesResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetServiceCodesResponse] = new DefaultStartrackGetServiceCodesResponseFormat {}
  implicit lazy val StartrackValidateAddressRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ValidateAddressRequest] = new DefaultStartrackValidateAddressRequestFormat {}
  implicit lazy val StartrackValidateAddressResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ValidateAddressResponse] = new DefaultStartrackValidateAddressResponseFormat {}
  implicit lazy val StartrackBookedPickupTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.BookedPickupType] = new DefaultStartrackBookedPickupTypeFormat {}
  implicit lazy val StartrackCustomerAuthorisationFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CustomerAuthorisation] = new DefaultStartrackCustomerAuthorisationFormat {}
  implicit lazy val StartrackPickupAccountTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupAccountType] = new DefaultStartrackPickupAccountTypeFormat {}
  implicit lazy val StartrackPickupBookingTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupBookingTypeType] = new DefaultStartrackPickupBookingTypeTypeFormat {}
  implicit lazy val StartrackPickupCutoffTimeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupCutoffTime] = new DefaultStartrackPickupCutoffTimeFormat {}
  implicit lazy val StartrackPickupFreightItemGroupTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupFreightItemGroupTypeType] = new DefaultStartrackPickupFreightItemGroupTypeTypeFormat {}
  implicit lazy val StartrackPickupLocationComplexTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupLocationComplexType] = new DefaultStartrackPickupLocationComplexTypeFormat {}
  implicit lazy val StartrackPickupLocationDetailsTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PickupLocationDetailsType] = new DefaultStartrackPickupLocationDetailsTypeFormat {}
  implicit lazy val StartrackChoiceTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ChoiceTypeType] = new DefaultStartrackChoiceTypeTypeFormat {}
  implicit lazy val StartrackConsignmentStatusesTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ConsignmentStatusesType] = new DefaultStartrackConsignmentStatusesTypeFormat {}
  implicit lazy val StartrackConsignmentTypesTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ConsignmentTypesType] = new DefaultStartrackConsignmentTypesTypeFormat {}
  implicit lazy val StartrackDespatchChoiceTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DespatchChoiceType] = new DefaultStartrackDespatchChoiceTypeFormat {}
  implicit lazy val StartrackGetConsignmentDetailChoiceTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetConsignmentDetailChoiceType] = new DefaultStartrackGetConsignmentDetailChoiceTypeFormat {}
  implicit lazy val StartrackMatchingConsignmentsTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.MatchingConsignmentsType] = new DefaultStartrackMatchingConsignmentsTypeFormat {}
  implicit lazy val StartrackPersonSearchTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.PersonSearchType] = new DefaultStartrackPersonSearchTypeFormat {}
  implicit lazy val StartrackSearchConsignmentRequestTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.SearchConsignmentRequestType] = new DefaultStartrackSearchConsignmentRequestTypeFormat {}
  implicit lazy val StartrackSearchConsignmentTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.SearchConsignmentType] = new DefaultStartrackSearchConsignmentTypeFormat {}
  implicit lazy val StartrackTp_choiceTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_choiceType] = new DefaultStartrackTp_choiceTypeFormat {}
  implicit lazy val StartrackTp_consignmentTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_consignmentType] = new DefaultStartrackTp_consignmentTypeFormat {}
  implicit lazy val StartrackTp_partnerTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_partnerType] = new DefaultStartrackTp_partnerTypeFormat {}
  implicit lazy val StartrackTp_searchConsignmentTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_searchConsignmentType] = new DefaultStartrackTp_searchConsignmentTypeFormat {}
  implicit lazy val StartrackFault3Format: scalaxb.XMLFormat[org.birchavenue.startrack.Fault3] = new DefaultStartrackFault3Format {}
  implicit lazy val StartrackGetConsignmentDetailRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetConsignmentDetailRequest] = new DefaultStartrackGetConsignmentDetailRequestFormat {}
  implicit lazy val StartrackGetConsignmentDetailResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetConsignmentDetailResponse] = new DefaultStartrackGetConsignmentDetailResponseFormat {}
  implicit lazy val StartrackSearchConsignmentsRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.SearchConsignmentsRequest] = new DefaultStartrackSearchConsignmentsRequestFormat {}
  implicit lazy val StartrackSearchConsignmentsResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.SearchConsignmentsResponse] = new DefaultStartrackSearchConsignmentsResponseFormat {}
  implicit lazy val StartrackTp_getConsignmentDetailRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_getConsignmentDetailRequest] = new DefaultStartrackTp_getConsignmentDetailRequestFormat {}
  implicit lazy val StartrackTp_getConsignmentDetailResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_getConsignmentDetailResponse] = new DefaultStartrackTp_getConsignmentDetailResponseFormat {}
  implicit lazy val StartrackTp_getFreightItemDetailRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_getFreightItemDetailRequest] = new DefaultStartrackTp_getFreightItemDetailRequestFormat {}
  implicit lazy val StartrackTp_getFreightItemDetailResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_getFreightItemDetailResponse] = new DefaultStartrackTp_getFreightItemDetailResponseFormat {}
  implicit lazy val StartrackTp_searchConsignmentsRequestFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_searchConsignmentsRequest] = new DefaultStartrackTp_searchConsignmentsRequestFormat {}
  implicit lazy val StartrackTp_searchConsignmentsResponseFormat: scalaxb.XMLFormat[org.birchavenue.startrack.Tp_searchConsignmentsResponse] = new DefaultStartrackTp_searchConsignmentsResponseFormat {}
  implicit lazy val StartrackAccountTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.AccountType] = new DefaultStartrackAccountTypeFormat {}
  implicit lazy val StartrackCustomerTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.CustomerType] = new DefaultStartrackCustomerTypeFormat {}
  implicit lazy val StartrackDespatchCustomerTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.DespatchCustomerType] = new DefaultStartrackDespatchCustomerTypeFormat {}
  implicit lazy val StartrackGetServiceCodeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetServiceCodeType] = new DefaultStartrackGetServiceCodeTypeFormat {}
  implicit lazy val StartrackGetUnitTypeTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.GetUnitTypeType] = new DefaultStartrackGetUnitTypeTypeFormat {}
  implicit lazy val StartrackReceiverTypeType2Format: scalaxb.XMLFormat[org.birchavenue.startrack.ReceiverTypeType2] = new DefaultStartrackReceiverTypeType2Format {}
  implicit lazy val StartrackImageContentTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ImageContentType] = new DefaultStartrackImageContentTypeFormat {}
  implicit lazy val StartrackImageTypableFormat: scalaxb.XMLFormat[org.birchavenue.startrack.ImageTypable] = new DefaultStartrackImageTypableFormat {}
  implicit lazy val StartrackImageTypeType2Format: scalaxb.XMLFormat[org.birchavenue.startrack.ImageTypeType2] = new DefaultStartrackImageTypeType2Format {}
  implicit lazy val StartrackStoreImageTypeFormat: scalaxb.XMLFormat[org.birchavenue.startrack.StoreImageType] = new DefaultStartrackStoreImageTypeFormat {}
  implicit lazy val StartrackStoreImageTypeSequence1Format: scalaxb.XMLFormat[org.birchavenue.startrack.StoreImageTypeSequence1] = new DefaultStartrackStoreImageTypeSequence1Format {}
  implicit lazy val StartrackStoreImageTypeSequence2Format: scalaxb.XMLFormat[org.birchavenue.startrack.StoreImageTypeSequence2] = new DefaultStartrackStoreImageTypeSequence2Format {}
  implicit lazy val StartrackStoreImageTypeSequence3Format: scalaxb.XMLFormat[org.birchavenue.startrack.StoreImageTypeSequence3] = new DefaultStartrackStoreImageTypeSequence3Format {}

  trait DefaultStartrackFaultFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Fault] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/externals/Faultv1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Fault] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_code")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_category")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_severity")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_timestamp")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_message")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_logicalComponentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_physicalComponentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_system")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_correlationId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/externals/Faultv1"), "fs_faultPayload")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      org.birchavenue.startrack.Fault(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.FaultCategoryType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[org.birchavenue.startrack.FaultSeverityType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Fault, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.fs_code map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_code"), __scope, false) } getOrElse {Nil},
        __obj.fs_category map { scalaxb.toXML[org.birchavenue.startrack.FaultCategoryType](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_category"), __scope, false) } getOrElse {Nil},
        __obj.fs_severity map { scalaxb.toXML[org.birchavenue.startrack.FaultSeverityType](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_severity"), __scope, false) } getOrElse {Nil},
        __obj.fs_timestamp map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_timestamp"), __scope, false) } getOrElse {Nil},
        __obj.fs_message map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_message"), __scope, false) } getOrElse {Nil},
        __obj.fs_logicalComponentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_logicalComponentId"), __scope, false) } getOrElse {Nil},
        __obj.fs_physicalComponentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_physicalComponentId"), __scope, false) } getOrElse {Nil},
        __obj.fs_system map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_system"), __scope, false) } getOrElse {Nil},
        __obj.fs_correlationId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_correlationId"), __scope, false) } getOrElse {Nil},
        __obj.fs_faultPayload map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/externals/Faultv1"), Some("fs_faultPayload"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackExtLocationDetailsTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ExtLocationDetailsType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("ExtLocationDetailsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ExtLocationDetailsType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "suburb")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "postCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "state")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.ExtLocationDetailsType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ExtLocationDetailsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.suburb, Some("http://startrackexpress/Common/Primitives/v1"), Some("suburb"), __scope, false),
        scalaxb.toXML[String](__obj.postCode, Some("http://startrackexpress/Common/Primitives/v1"), Some("postCode"), __scope, false),
        scalaxb.toXML[String](__obj.state, Some("http://startrackexpress/Common/Primitives/v1"), Some("state"), __scope, false))

  }

  trait DefaultStartrackLocationDetailsTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.LocationDetailsType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("LocationDetailsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.LocationDetailsType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "locationStandard")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "suburb")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "postCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "state")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.LocationDetailsType(scalaxb.fromXML[org.birchavenue.startrack.LocationStandardEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.LocationDetailsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.LocationStandardEnum](__obj.locationStandard, Some("http://startrackexpress/Common/Primitives/v1"), Some("locationStandard"), __scope, false),
        __obj.suburb map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("suburb"), __scope, false) } getOrElse {Nil},
        __obj.postCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("postCode"), __scope, false) } getOrElse {Nil},
        __obj.state map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("state"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackScanModeHeaderTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ScanModeHeaderType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("ScanModeHeaderType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ScanModeHeaderType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "scanModeType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "scanMode")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ScanModeHeaderType(scalaxb.fromXML[org.birchavenue.startrack.ScanModeTypeEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ScanModeHeaderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.ScanModeTypeEnum](__obj.scanModeType, Some("http://startrackexpress/Common/Primitives/v1"), Some("scanModeType"), __scope, false),
        __obj.scanMode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("scanMode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackTransactionHeaderTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.TransactionHeaderType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("TransactionHeaderType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.TransactionHeaderType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "source")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "accountNo")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "userAccessKey")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "userId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "transactionId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "transactionDatetime")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.startrack.TransactionHeaderType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.TransactionHeaderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.source, Some("http://startrackexpress/Common/Primitives/v1"), Some("source"), __scope, false),
        scalaxb.toXML[BigInt](__obj.accountNo, Some("http://startrackexpress/Common/Primitives/v1"), Some("accountNo"), __scope, false),
        scalaxb.toXML[String](__obj.userAccessKey, Some("http://startrackexpress/Common/Primitives/v1"), Some("userAccessKey"), __scope, false),
        __obj.userId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("userId"), __scope, false) } getOrElse {Nil},
        __obj.transactionId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("transactionId"), __scope, false) } getOrElse {Nil},
        __obj.transactionDatetime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("transactionDatetime"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackTransitStateHeaderTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.TransitStateHeaderType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("TransitStateHeaderType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.TransitStateHeaderType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "transitStateType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "transitStateName")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.TransitStateHeaderType(scalaxb.fromXML[org.birchavenue.startrack.TransitStateTypeEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.TransitStateHeaderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransitStateTypeEnum](__obj.transitStateType, Some("http://startrackexpress/Common/Primitives/v1"), Some("transitStateType"), __scope, false),
        __obj.transitStateName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("transitStateName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackAddressComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.AddressComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("addressComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.AddressComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "id")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "addressLine")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "suburbOrLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "state")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "postCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "country")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryPoint")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.AddressComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DelliveryPointComplex](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.AddressComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.addressLine flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("addressLine"), __scope, false) },
        __obj.suburbOrLocation map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("suburbOrLocation"), __scope, false) } getOrElse {Nil},
        __obj.state map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("state"), __scope, false) } getOrElse {Nil},
        __obj.postCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("postCode"), __scope, false) } getOrElse {Nil},
        __obj.country map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("country"), __scope, false) } getOrElse {Nil},
        __obj.deliveryPoint map { scalaxb.toXML[org.birchavenue.startrack.DelliveryPointComplex](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryPoint"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackAdvancedConsignmentSearchComplextFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.AdvancedConsignmentSearchComplext] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("advancedConsignmentSearchComplext")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.AdvancedConsignmentSearchComplext] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "consignmentType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchDateToday")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchDateYesterday")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchDateFrom")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchDateTo")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "etaDateFrom")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "etaDateTo")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryDateFrom")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryDateTo")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "etaDateDateToday")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "etaDateDateYesterday")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryDateToday")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryDateYesterday")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      org.birchavenue.startrack.AdvancedConsignmentSearchComplext(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.AdvancedConsignmentSearchComplext, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.consignmentType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("consignmentType"), __scope, false) } getOrElse {Nil},
        __obj.despatchDateToday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchDateToday"), __scope, false) } getOrElse {Nil},
        __obj.despatchDateYesterday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchDateYesterday"), __scope, false) } getOrElse {Nil},
        __obj.despatchDateFrom map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchDateFrom"), __scope, false) } getOrElse {Nil},
        __obj.despatchDateTo map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchDateTo"), __scope, false) } getOrElse {Nil},
        __obj.etaDateFrom map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("etaDateFrom"), __scope, false) } getOrElse {Nil},
        __obj.etaDateTo map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("etaDateTo"), __scope, false) } getOrElse {Nil},
        __obj.deliveryDateFrom map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryDateFrom"), __scope, false) } getOrElse {Nil},
        __obj.deliveryDateTo map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryDateTo"), __scope, false) } getOrElse {Nil},
        __obj.etaDateDateToday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("etaDateDateToday"), __scope, false) } getOrElse {Nil},
        __obj.etaDateDateYesterday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("etaDateDateYesterday"), __scope, false) } getOrElse {Nil},
        __obj.deliveryDateToday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryDateToday"), __scope, false) } getOrElse {Nil},
        __obj.deliveryDateYesterday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryDateYesterday"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackBusinessTransactionFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.BusinessTransaction] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("businessTransaction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.BusinessTransaction] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "Id")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "IdQualifier")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.BusinessTransaction(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.BusinessTransaction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("Id"), __scope, false) } getOrElse {Nil},
        __obj.IdQualifier map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("IdQualifier"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCarrierComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CarrierComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("carrierComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CarrierComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "carrierCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "lock_seq")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.CarrierComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CarrierComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.carrierCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("carrierCode"), __scope, false) } getOrElse {Nil},
        __obj.lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("lock_seq"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackClaimDefinitionComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ClaimDefinitionComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("claimDefinitionComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ClaimDefinitionComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "claimArea")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "claimCategory")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "targetSystem")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "claimDefinitionId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "consignmentIdRequired")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.startrack.ClaimDefinitionComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ClaimDefinitionComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.claimArea map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("claimArea"), __scope, false) } getOrElse {Nil},
        __obj.claimCategory map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("claimCategory"), __scope, false) } getOrElse {Nil},
        __obj.targetSystem map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("targetSystem"), __scope, false) } getOrElse {Nil},
        __obj.claimDefinitionId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("claimDefinitionId"), __scope, false) } getOrElse {Nil},
        __obj.consignmentIdRequired map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("consignmentIdRequired"), __scope, false) } getOrElse {Nil})

  }

  def buildStartrackClaimResponseMethodFormat = new DefaultStartrackClaimResponseMethodFormat {}
  trait DefaultStartrackClaimResponseMethodFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ClaimResponseMethod] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ClaimResponseMethod] =
      Right(org.birchavenue.startrack.ClaimResponseMethod.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.ClaimResponseMethod, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackConnoteTransitStateComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ConnoteTransitStateComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("connoteTransitStateComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ConnoteTransitStateComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "connoteTransitState")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "connoteTransitStateDesc")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ConnoteTransitStateComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ConnoteTransitStateComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.connoteTransitState map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("connoteTransitState"), __scope, false) } getOrElse {Nil},
        __obj.connoteTransitStateDesc map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("connoteTransitStateDesc"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackContactDetailsComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ContactDetailsComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("contactDetailsComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ContactDetailsComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "emailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "phoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "mobileNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "faxNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "address")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.startrack.ContactDetailsComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ContactDetailsComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.emailAddress map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("emailAddress"), __scope, false) } getOrElse {Nil},
        __obj.phoneNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("phoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.mobileNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("mobileNumber"), __scope, false) } getOrElse {Nil},
        __obj.faxNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("faxNumber"), __scope, false) } getOrElse {Nil},
        __obj.address map { scalaxb.toXML[org.birchavenue.startrack.AddressComplex](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCustomerDefinedRefValuesFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CustomerDefinedRefValues] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("customerDefinedRefValues")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CustomerDefinedRefValues] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "value")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "referenceOrder")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "printOnConntoe")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.CustomerDefinedRefValues(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CustomerDefinedRefValues, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.value map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("value"), __scope, false) } getOrElse {Nil},
        __obj.referenceOrder map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("referenceOrder"), __scope, false) } getOrElse {Nil},
        __obj.printOnConntoe map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("printOnConntoe"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCustomerDefinedRefsFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CustomerDefinedRefs] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("customerDefinedRefs")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CustomerDefinedRefs] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "isMandatory")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "referenceOrder")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "printOnConnote")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.CustomerDefinedRefs(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CustomerDefinedRefs, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.isMandatory map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("isMandatory"), __scope, false) } getOrElse {Nil},
        __obj.referenceOrder map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("referenceOrder"), __scope, false) } getOrElse {Nil},
        __obj.printOnConnote map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("printOnConnote"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDelliveryPointComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DelliveryPointComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("delliveryPointComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DelliveryPointComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "dpId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "longitude")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "latitude")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.DelliveryPointComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DelliveryPointComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dpId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("dpId"), __scope, false) } getOrElse {Nil},
        __obj.longitude map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("longitude"), __scope, false) } getOrElse {Nil},
        __obj.latitude map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("latitude"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDepotCutOffTimeComplexableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.DepotCutOffTimeComplexable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.DepotCutOffTimeComplexable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("getDepotCutOffTimeComplex")) => Right(scalaxb.fromXML[org.birchavenue.startrack.GetDepotCutOffTimeComplex](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.DepotCutOffTimeComplex](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.DepotCutOffTimeComplexable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.GetDepotCutOffTimeComplex => scalaxb.toXML[org.birchavenue.startrack.GetDepotCutOffTimeComplex](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.DepotCutOffTimeComplex => scalaxb.toXML[org.birchavenue.startrack.DepotCutOffTimeComplex](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackDepotCutOffTimeComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DepotCutOffTimeComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("depotCutOffTimeComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DepotCutOffTimeComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "depotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "depotName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "airBookingCutOff")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "roadBookingCutOff")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "airPickupCutOff")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "roadPickupCutOff")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.startrack.DepotCutOffTimeComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DepotCutOffTimeComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.depotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("depotCode"), __scope, false) } getOrElse {Nil},
        __obj.depotName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("depotName"), __scope, false) } getOrElse {Nil},
        __obj.airBookingCutOff map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("airBookingCutOff"), __scope, false) } getOrElse {Nil},
        __obj.roadBookingCutOff map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("roadBookingCutOff"), __scope, false) } getOrElse {Nil},
        __obj.airPickupCutOff map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("airPickupCutOff"), __scope, false) } getOrElse {Nil},
        __obj.roadPickupCutOff map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("roadPickupCutOff"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDespatchFreightPreferencesFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DespatchFreightPreferences] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("despatchFreightPreferences")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DespatchFreightPreferences] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultSenderAccount")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultCarrier")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultPackagingType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultAutoConfirm")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultPrintSecondaryLabel")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultBookinDelivery")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultNotifyReceiver")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultPayerType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultUpdateReceiverList")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultRequestService")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultUseReceiverGroup")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultSMSAlertAtDelivery")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultAutoPrintLabels")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultAutoConsolidate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultConsolidateOnRef")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultService")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      org.birchavenue.startrack.DespatchFreightPreferences(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AccountType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[org.birchavenue.startrack.PackagingType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DespatchFreightPreferences, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.defaultSenderAccount map { scalaxb.toXML[org.birchavenue.startrack.AccountType](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultSenderAccount"), __scope, false) } getOrElse {Nil},
        __obj.defaultCarrier map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultCarrier"), __scope, false) } getOrElse {Nil},
        __obj.defaultPackagingType map { scalaxb.toXML[org.birchavenue.startrack.PackagingType](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultPackagingType"), __scope, false) } getOrElse {Nil},
        __obj.defaultAutoConfirm map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultAutoConfirm"), __scope, false) } getOrElse {Nil},
        __obj.defaultPrintSecondaryLabel map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultPrintSecondaryLabel"), __scope, false) } getOrElse {Nil},
        __obj.defaultBookinDelivery map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultBookinDelivery"), __scope, false) } getOrElse {Nil},
        __obj.defaultNotifyReceiver map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultNotifyReceiver"), __scope, false) } getOrElse {Nil},
        __obj.defaultPayerType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultPayerType"), __scope, false) } getOrElse {Nil},
        __obj.defaultUpdateReceiverList map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultUpdateReceiverList"), __scope, false) } getOrElse {Nil},
        __obj.defaultRequestService map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultRequestService"), __scope, false) } getOrElse {Nil},
        __obj.defaultUseReceiverGroup map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultUseReceiverGroup"), __scope, false) } getOrElse {Nil},
        __obj.defaultSMSAlertAtDelivery map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultSMSAlertAtDelivery"), __scope, false) } getOrElse {Nil},
        __obj.defaultAutoPrintLabels map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultAutoPrintLabels"), __scope, false) } getOrElse {Nil},
        __obj.defaultAutoConsolidate map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultAutoConsolidate"), __scope, false) } getOrElse {Nil},
        __obj.defaultConsolidateOnRef map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultConsolidateOnRef"), __scope, false) } getOrElse {Nil},
        __obj.defaultService map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultService"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDespatchTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DespatchType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("despatchType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DespatchType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "cutOffTime")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.DespatchType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DespatchType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.despatchId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchId"), __scope, false) } getOrElse {Nil},
        __obj.cutOffTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("cutOffTime"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackEnquiryDefinitionComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.EnquiryDefinitionComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("enquiryDefinitionComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.EnquiryDefinitionComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "enquiryArea")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "enquiryCategory")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "recipientEmailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "targetSystem")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "requiresAuthentication")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "enquiryDefinitionId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "consignmentIdRequired")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.EnquiryDefinitionComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.EnquiryDefinitionComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.enquiryArea map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("enquiryArea"), __scope, false) } getOrElse {Nil},
        __obj.enquiryCategory map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("enquiryCategory"), __scope, false) } getOrElse {Nil},
        __obj.recipientEmailAddress flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("recipientEmailAddress"), __scope, false) },
        __obj.targetSystem map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("targetSystem"), __scope, false) } getOrElse {Nil},
        __obj.requiresAuthentication map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("requiresAuthentication"), __scope, false) } getOrElse {Nil},
        __obj.enquiryDefinitionId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("enquiryDefinitionId"), __scope, false) } getOrElse {Nil},
        __obj.consignmentIdRequired map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("consignmentIdRequired"), __scope, false) } getOrElse {Nil})

  }

  def buildStartrackEnquiryResponseMethodFormat = new DefaultStartrackEnquiryResponseMethodFormat {}
  trait DefaultStartrackEnquiryResponseMethodFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.EnquiryResponseMethod] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.EnquiryResponseMethod] =
      Right(org.birchavenue.startrack.EnquiryResponseMethod.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.EnquiryResponseMethod, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackFaultTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.FaultType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("fault")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.FaultType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "code")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "category")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "severity")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "timestamp")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "message")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "technicalContext")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "businessTransaction")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "faultPayload")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "faultContext")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      org.birchavenue.startrack.FaultType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[org.birchavenue.startrack.TechnicalContext](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.BusinessTransaction](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.FaultPayload](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.FaultContext](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.FaultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.code map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.category map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("category"), __scope, false) } getOrElse {Nil},
        __obj.severity map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("severity"), __scope, false) } getOrElse {Nil},
        __obj.timestamp map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("timestamp"), __scope, false) } getOrElse {Nil},
        __obj.message map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("message"), __scope, false) } getOrElse {Nil},
        __obj.technicalContext map { scalaxb.toXML[org.birchavenue.startrack.TechnicalContext](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("technicalContext"), __scope, false) } getOrElse {Nil},
        __obj.businessTransaction flatMap { scalaxb.toXML[org.birchavenue.startrack.BusinessTransaction](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("businessTransaction"), __scope, false) },
        __obj.faultPayload flatMap { scalaxb.toXML[org.birchavenue.startrack.FaultPayload](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("faultPayload"), __scope, false) },
        __obj.faultContext flatMap { scalaxb.toXML[org.birchavenue.startrack.FaultContext](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("faultContext"), __scope, false) })

  }

  def buildStartrackFaultCategoryTypeFormat = new DefaultStartrackFaultCategoryTypeFormat {}
  trait DefaultStartrackFaultCategoryTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.FaultCategoryType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.FaultCategoryType] =
      Right(org.birchavenue.startrack.FaultCategoryType.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.FaultCategoryType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackFaultContextFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.FaultContext] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("faultContext")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.FaultContext] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "value")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.FaultContext(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.FaultContext, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.value map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackFaultPayloadFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.FaultPayload] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("faultPayload")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.FaultPayload] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "qualifier")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "payload")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.FaultPayload(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.FaultPayload, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.qualifier map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("qualifier"), __scope, false) } getOrElse {Nil},
        __obj.payload map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("payload"), __scope, false) } getOrElse {Nil})

  }

  def buildStartrackFaultSeverityTypeFormat = new DefaultStartrackFaultSeverityTypeFormat {}
  trait DefaultStartrackFaultSeverityTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.FaultSeverityType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.FaultSeverityType] =
      Right(org.birchavenue.startrack.FaultSeverityType.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.FaultSeverityType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackFreightTrackingPreferencesComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.FreightTrackingPreferencesComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("freightTrackingPreferencesComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.FreightTrackingPreferencesComplex] =
      phrase(((opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "trackingFavouriteId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "isDefault")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "consignmentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "referenceNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchDateFrom")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchDateTo")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchDateYesterday")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "etaDateFrom")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "etaDateTo")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "etaDateToday"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryDateFrom")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryDateTo")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryDateToday")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "consignmentType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "consignmentStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "accountNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "despatchId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "receiverName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "receiverState"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence2(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "receiverSuburb")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "receiverPostCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "senderName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "senderState")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "senderSuburb")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "senderPostCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "advancedConsignmentType"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 => org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AdvancedConsignmentSearchComplext](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.FreightTrackingPreferencesComplex(p1,
        p2,
        p3) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.FreightTrackingPreferencesComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence1](__obj.freighttrackingpreferencescomplexsequence1, None, Some("freighttrackingpreferencescomplexsequence1"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence2](__obj.freighttrackingpreferencescomplexsequence2, None, Some("freighttrackingpreferencescomplexsequence2"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence3](__obj.freighttrackingpreferencescomplexsequence3, None, Some("freighttrackingpreferencescomplexsequence3"), __scope, false))

  }

  trait DefaultStartrackFreightTrackingPreferencesComplexSequence1Format extends scalaxb.XMLFormat[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence1] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.trackingFavouriteId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("trackingFavouriteId"), __scope, false) } getOrElse {Nil},
        __obj.isDefault map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("isDefault"), __scope, false) } getOrElse {Nil},
        __obj.consignmentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("consignmentId"), __scope, false) } getOrElse {Nil},
        __obj.referenceNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("referenceNumber"), __scope, false) } getOrElse {Nil},
        __obj.despatchDateFrom map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchDateFrom"), __scope, false) } getOrElse {Nil},
        __obj.despatchDateTo map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchDateTo"), __scope, false) } getOrElse {Nil},
        __obj.despatchDateYesterday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchDateYesterday"), __scope, false) } getOrElse {Nil},
        __obj.etaDateFrom map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("etaDateFrom"), __scope, false) } getOrElse {Nil},
        __obj.etaDateTo map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("etaDateTo"), __scope, false) } getOrElse {Nil},
        __obj.etaDateToday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("etaDateToday"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultStartrackFreightTrackingPreferencesComplexSequence2Format extends scalaxb.XMLFormat[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence2] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.deliveryDateFrom map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryDateFrom"), __scope, false) } getOrElse {Nil},
        __obj.deliveryDateTo map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryDateTo"), __scope, false) } getOrElse {Nil},
        __obj.deliveryDateToday map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryDateToday"), __scope, false) } getOrElse {Nil},
        __obj.consignmentType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("consignmentType"), __scope, false) } getOrElse {Nil},
        __obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil},
        __obj.consignmentStatus map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("consignmentStatus"), __scope, false) } getOrElse {Nil},
        __obj.accountNumber map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("accountNumber"), __scope, false) } getOrElse {Nil},
        __obj.despatchId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("despatchId"), __scope, false) } getOrElse {Nil},
        __obj.receiverName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("receiverName"), __scope, false) } getOrElse {Nil},
        __obj.receiverState map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("receiverState"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultStartrackFreightTrackingPreferencesComplexSequence3Format extends scalaxb.XMLFormat[org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence3] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.startrack.FreightTrackingPreferencesComplexSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.receiverSuburb map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("receiverSuburb"), __scope, false) } getOrElse {Nil},
        __obj.receiverPostCode map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("receiverPostCode"), __scope, false) } getOrElse {Nil},
        __obj.senderName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("senderName"), __scope, false) } getOrElse {Nil},
        __obj.senderState map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("senderState"), __scope, false) } getOrElse {Nil},
        __obj.senderSuburb map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("senderSuburb"), __scope, false) } getOrElse {Nil},
        __obj.senderPostCode map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("senderPostCode"), __scope, false) } getOrElse {Nil},
        __obj.advancedConsignmentType map { scalaxb.toXML[org.birchavenue.startrack.AdvancedConsignmentSearchComplext](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("advancedConsignmentType"), __scope, false) } getOrElse {Nil})


  }

  def buildStartrackHotListNotificationMethodFormat = new DefaultStartrackHotListNotificationMethodFormat {}
  trait DefaultStartrackHotListNotificationMethodFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.HotListNotificationMethod] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.HotListNotificationMethod] =
      Right(org.birchavenue.startrack.HotListNotificationMethod.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.HotListNotificationMethod, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackLocationCutoffTimeComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.LocationCutoffTimeComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("locationCutoffTimeComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.LocationCutoffTimeComplex] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "suburbName")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "postCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "nearestDepotCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "regularCutoffTime")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "oversizeCutoffTime")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "lateCutOffTime")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "localTimezone")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "lateSurcharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "auspostLodgement")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "agentLodgement")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "oversizeDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "oversizeWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "maxDimension")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "maxWeight")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "nextBusinessDay")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "currentTimeAtLocation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      org.birchavenue.startrack.LocationCutoffTimeComplex(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.LocationCutoffTimeComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.serviceCode, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceCode"), __scope, false),
        scalaxb.toXML[String](__obj.suburbName, Some("http://startrackexpress/Common/Primitives/v1"), Some("suburbName"), __scope, false),
        scalaxb.toXML[String](__obj.postCode, Some("http://startrackexpress/Common/Primitives/v1"), Some("postCode"), __scope, false),
        scalaxb.toXML[String](__obj.nearestDepotCode, Some("http://startrackexpress/Common/Primitives/v1"), Some("nearestDepotCode"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.regularCutoffTime, Some("http://startrackexpress/Common/Primitives/v1"), Some("regularCutoffTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.oversizeCutoffTime, Some("http://startrackexpress/Common/Primitives/v1"), Some("oversizeCutoffTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.lateCutOffTime, Some("http://startrackexpress/Common/Primitives/v1"), Some("lateCutOffTime"), __scope, false),
        scalaxb.toXML[String](__obj.localTimezone, Some("http://startrackexpress/Common/Primitives/v1"), Some("localTimezone"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.lateSurcharge, Some("http://startrackexpress/Common/Primitives/v1"), Some("lateSurcharge"), __scope, false),
        __obj.auspostLodgement map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("auspostLodgement"), __scope, false) } getOrElse {Nil},
        __obj.agentLodgement map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("agentLodgement"), __scope, false) } getOrElse {Nil},
        __obj.oversizeDimension map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("oversizeDimension"), __scope, false) } getOrElse {Nil},
        __obj.oversizeWeight map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("oversizeWeight"), __scope, false) } getOrElse {Nil},
        __obj.maxDimension map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("maxDimension"), __scope, false) } getOrElse {Nil},
        __obj.maxWeight map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("maxWeight"), __scope, false) } getOrElse {Nil},
        __obj.nextBusinessDay map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("nextBusinessDay"), __scope, false) } getOrElse {Nil},
        __obj.currentTimeAtLocation map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("currentTimeAtLocation"), __scope, false) } getOrElse {Nil})

  }

  def buildStartrackLocationStandardEnumFormat = new DefaultStartrackLocationStandardEnumFormat {}
  trait DefaultStartrackLocationStandardEnumFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.LocationStandardEnum] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.LocationStandardEnum] =
      Right(org.birchavenue.startrack.LocationStandardEnum.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.LocationStandardEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackMatchedAddressComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.MatchedAddressComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("matchedAddressComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.MatchedAddressComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "id")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "addressLine")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "suburbOrLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "state")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "postCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "country")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "deliveryPoint")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.MatchedAddressComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DelliveryPointComplex](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.MatchedAddressComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.addressLine flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("addressLine"), __scope, false) },
        __obj.suburbOrLocation map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("suburbOrLocation"), __scope, false) } getOrElse {Nil},
        __obj.state map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("state"), __scope, false) } getOrElse {Nil},
        __obj.postCode map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("postCode"), __scope, false) } getOrElse {Nil},
        __obj.country map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("country"), __scope, false) } getOrElse {Nil},
        __obj.deliveryPoint map { scalaxb.toXML[org.birchavenue.startrack.DelliveryPointComplex](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("deliveryPoint"), __scope, false) } getOrElse {Nil})

  }

  def buildStartrackOpCodeEnumFormat = new DefaultStartrackOpCodeEnumFormat {}
  trait DefaultStartrackOpCodeEnumFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.OpCodeEnum] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.OpCodeEnum] =
      Right(org.birchavenue.startrack.OpCodeEnum.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.OpCodeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackPackagingTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PackagingType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("packagingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PackagingType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "unitType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "height")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "weight")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "length")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "width")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "description")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.PackagingType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PackagingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.unitType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("unitType"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.height map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("height"), __scope, false) } getOrElse {Nil},
        __obj.weight map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("weight"), __scope, false) } getOrElse {Nil},
        __obj.length map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("length"), __scope, false) } getOrElse {Nil},
        __obj.width map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("width"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("description"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPaginationTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PaginationType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("paginationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PaginationType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "maxRows")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "availableRows")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "firstRow")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.PaginationType(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PaginationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.maxRows, Some("http://startrackexpress/Common/Primitives/v1"), Some("maxRows"), __scope, false),
        scalaxb.toXML[BigInt](__obj.availableRows, Some("http://startrackexpress/Common/Primitives/v1"), Some("availableRows"), __scope, false),
        scalaxb.toXML[BigInt](__obj.firstRow, Some("http://startrackexpress/Common/Primitives/v1"), Some("firstRow"), __scope, false))

  }

  trait DefaultStartrackPickupBookingPrefsComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupBookingPrefsComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("pickupBookingPrefsComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupBookingPrefsComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultService")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultPickupLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "defaultUpdatePickupLocationList")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.PickupBookingPrefsComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.PickupLocationComplex](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupBookingPrefsComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.defaultService map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultService"), __scope, false) } getOrElse {Nil},
        __obj.defaultPickupLocation map { scalaxb.toXML[org.birchavenue.startrack.PickupLocationComplex](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultPickupLocation"), __scope, false) } getOrElse {Nil},
        __obj.defaultUpdatePickupLocationList map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("defaultUpdatePickupLocationList"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPickupLocationComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupLocationComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("pickupLocationComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupLocationComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "index")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "pickupCompanyName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "pickupContact")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "pickupAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "pickupPhoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "pickupEmailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "pickupPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "closingTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "airCutoffTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "roadCutoffTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "nearestDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "regularPickup")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      org.birchavenue.startrack.PickupLocationComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupLocationComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.index map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("index"), __scope, false) } getOrElse {Nil},
        __obj.pickupCompanyName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("pickupCompanyName"), __scope, false) } getOrElse {Nil},
        __obj.pickupContact map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("pickupContact"), __scope, false) } getOrElse {Nil},
        __obj.pickupAddress map { scalaxb.toXML[org.birchavenue.startrack.AddressComplex](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("pickupAddress"), __scope, false) } getOrElse {Nil},
        __obj.pickupPhoneNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("pickupPhoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.pickupEmailAddress map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("pickupEmailAddress"), __scope, false) } getOrElse {Nil},
        __obj.pickupPoint map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("pickupPoint"), __scope, false) } getOrElse {Nil},
        __obj.closingTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("closingTime"), __scope, false) } getOrElse {Nil},
        __obj.airCutoffTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("airCutoffTime"), __scope, false) } getOrElse {Nil},
        __obj.roadCutoffTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("roadCutoffTime"), __scope, false) } getOrElse {Nil},
        __obj.nearestDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("nearestDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.regularPickup map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("regularPickup"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackReceiverGroupFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ReceiverGroup] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("receiverGroup")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ReceiverGroup] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "receiver")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ReceiverGroup(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ReceiverTypeType2](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ReceiverGroup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.receiver map { scalaxb.toXML[org.birchavenue.startrack.ReceiverTypeType2](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("receiver"), __scope, false) } getOrElse {Nil})

  }

  def buildStartrackScanModeTypeEnumFormat = new DefaultStartrackScanModeTypeEnumFormat {}
  trait DefaultStartrackScanModeTypeEnumFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ScanModeTypeEnum] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ScanModeTypeEnum] =
      Right(org.birchavenue.startrack.ScanModeTypeEnum.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.ScanModeTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackServiceCodeComplexableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ServiceCodeComplexable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ServiceCodeComplexable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("serviceCodeComplex")) => Right(scalaxb.fromXML[org.birchavenue.startrack.ServiceCodeComplexType](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.ServiceCodeComplex](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.ServiceCodeComplexable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.ServiceCodeComplexType => scalaxb.toXML[org.birchavenue.startrack.ServiceCodeComplexType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.ServiceCodeComplex => scalaxb.toXML[org.birchavenue.startrack.ServiceCodeComplex](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackServiceCodeComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ServiceCodeComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("serviceCodeComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ServiceCodeComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceClass")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceRank")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "publiclyViewable")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "isDefault")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "sortOrder")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "transportType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "tLabelText")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "fastServiceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "newProduct")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "applicability")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      org.birchavenue.startrack.ServiceCodeComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ServiceCodeComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil},
        __obj.serviceDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceDescription"), __scope, false) } getOrElse {Nil},
        __obj.serviceClass map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceClass"), __scope, false) } getOrElse {Nil},
        __obj.serviceType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceType"), __scope, false) } getOrElse {Nil},
        __obj.serviceRank map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceRank"), __scope, false) } getOrElse {Nil},
        __obj.publiclyViewable map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("publiclyViewable"), __scope, false) } getOrElse {Nil},
        __obj.isDefault map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("isDefault"), __scope, false) } getOrElse {Nil},
        __obj.sortOrder map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("sortOrder"), __scope, false) } getOrElse {Nil},
        __obj.transportType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("transportType"), __scope, false) } getOrElse {Nil},
        __obj.tLabelText map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("tLabelText"), __scope, false) } getOrElse {Nil},
        __obj.fastServiceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("fastServiceCode"), __scope, false) } getOrElse {Nil},
        __obj.newProduct map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("newProduct"), __scope, false) } getOrElse {Nil},
        __obj.applicability map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("applicability"), __scope, false) } getOrElse {Nil})

  }

  def buildStartrackServiceTypeEnumFormat = new DefaultStartrackServiceTypeEnumFormat {}
  trait DefaultStartrackServiceTypeEnumFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ServiceTypeEnum] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ServiceTypeEnum] =
      Right(org.birchavenue.startrack.ServiceTypeEnum.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.ServiceTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackTechnicalContextFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.TechnicalContext] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("technicalContext")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.TechnicalContext] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "logicalComponentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "physicalComponentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "system")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "correlationId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.TechnicalContext(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.TechnicalContext, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.logicalComponentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("logicalComponentId"), __scope, false) } getOrElse {Nil},
        __obj.physicalComponentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("physicalComponentId"), __scope, false) } getOrElse {Nil},
        __obj.system map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("system"), __scope, false) } getOrElse {Nil},
        __obj.correlationId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("correlationId"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackTp_TransactionHeaderTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_TransactionHeaderType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("tp_TransactionHeaderType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_TransactionHeaderType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "source")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "userAccessKey")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "userId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "transactionId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "transactionDatetime")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.startrack.Tp_TransactionHeaderType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_TransactionHeaderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.source, Some("http://startrackexpress/Common/Primitives/v1"), Some("source"), __scope, false),
        scalaxb.toXML[String](__obj.userAccessKey, Some("http://startrackexpress/Common/Primitives/v1"), Some("userAccessKey"), __scope, false),
        __obj.userId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("userId"), __scope, false) } getOrElse {Nil},
        __obj.transactionId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("transactionId"), __scope, false) } getOrElse {Nil},
        __obj.transactionDatetime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("transactionDatetime"), __scope, false) } getOrElse {Nil})

  }

  def buildStartrackTrackingTypeEnumFormat = new DefaultStartrackTrackingTypeEnumFormat {}
  trait DefaultStartrackTrackingTypeEnumFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.TrackingTypeEnum] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.TrackingTypeEnum] =
      Right(org.birchavenue.startrack.TrackingTypeEnum.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.TrackingTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  def buildStartrackTransitStateTypeEnumFormat = new DefaultStartrackTransitStateTypeEnumFormat {}
  trait DefaultStartrackTransitStateTypeEnumFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.TransitStateTypeEnum] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.TransitStateTypeEnum] =
      Right(org.birchavenue.startrack.TransitStateTypeEnum.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.startrack.TransitStateTypeEnum, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultStartrackUpdateDepotCutOffTimeComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.UpdateDepotCutOffTimeComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    override def typeName: Option[String] = Some("updateDepotCutOffTimeComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.UpdateDepotCutOffTimeComplex] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "depotCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "airBookingCutOff")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "roadBookingCutOff")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "airPickupCutOff")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "roadPickupCutOff")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.startrack.UpdateDepotCutOffTimeComplex(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.UpdateDepotCutOffTimeComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.depotCode, Some("http://startrackexpress/Common/Primitives/v1"), Some("depotCode"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.airBookingCutOff, Some("http://startrackexpress/Common/Primitives/v1"), Some("airBookingCutOff"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.roadBookingCutOff, Some("http://startrackexpress/Common/Primitives/v1"), Some("roadBookingCutOff"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.airPickupCutOff, Some("http://startrackexpress/Common/Primitives/v1"), Some("airPickupCutOff"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.roadPickupCutOff, Some("http://startrackexpress/Common/Primitives/v1"), Some("roadPickupCutOff"), __scope, false))

  }

  trait DefaultStartrackFault2Format extends scalaxb.ElemNameParser[org.birchavenue.startrack.Fault2] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Primitives/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Fault2] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "fault")) ^^
      { case p1 =>
      org.birchavenue.startrack.Fault2(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.FaultType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Fault2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.fault map { scalaxb.toXML[org.birchavenue.startrack.FaultType](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("fault"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCreatePickupBookingRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CreatePickupBookingRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CreatePickupBookingRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "pickupBooking")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.CreatePickupBookingRequest(scalaxb.fromXML[org.birchavenue.startrack.TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.PickupBookingTypeType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CreatePickupBookingRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.PickupBookingTypeType](__obj.pickupBooking, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("pickupBooking"), __scope, false))

  }

  trait DefaultStartrackCreatePickupBookingResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CreatePickupBookingResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CreatePickupBookingResponse] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "pickupBookingId")) ^^
      { case p1 =>
      org.birchavenue.startrack.CreatePickupBookingResponse(scalaxb.fromXML[org.birchavenue.startrack.PickupBookingIdType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CreatePickupBookingResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[org.birchavenue.startrack.PickupBookingIdType](__obj.pickupBookingId, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("pickupBookingId"), __scope, false))

  }

  trait DefaultStartrackGetPickupCutoffTimesRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetPickupCutoffTimesRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetPickupCutoffTimesRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "pickupCutoffParameters")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.GetPickupCutoffTimesRequest(scalaxb.fromXML[org.birchavenue.startrack.TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.PickupCutoffTime](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetPickupCutoffTimesRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.PickupCutoffTime](__obj.pickupCutoffParameters, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("pickupCutoffParameters"), __scope, false))

  }

  trait DefaultStartrackGetPickupCutoffTimesResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetPickupCutoffTimesResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetPickupCutoffTimesResponse] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "pickupCutoffDetails")) ^^
      { case p1 =>
      org.birchavenue.startrack.GetPickupCutoffTimesResponse(scalaxb.fromXML[org.birchavenue.startrack.LocationCutoffTimeComplex](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetPickupCutoffTimesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[org.birchavenue.startrack.LocationCutoffTimeComplex](__obj.pickupCutoffDetails, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("pickupCutoffDetails"), __scope, false))

  }

  trait DefaultStartrackTp_createPickupBookingRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_createPickupBookingRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_createPickupBookingRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "pickupBooking")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.Tp_createPickupBookingRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.PickupBookingTypeType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_createPickupBookingRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.PickupBookingTypeType](__obj.pickupBooking, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("pickupBooking"), __scope, false))

  }

  trait DefaultStartrackTp_createPickupBookingResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_createPickupBookingResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_createPickupBookingResponse] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "pickupBookingId")) ^^
      { case p1 =>
      org.birchavenue.startrack.Tp_createPickupBookingResponse(scalaxb.fromXML[org.birchavenue.startrack.PickupBookingIdType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_createPickupBookingResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[org.birchavenue.startrack.PickupBookingIdType](__obj.pickupBookingId, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("pickupBookingId"), __scope, false))

  }

  trait DefaultStartrackTp_getPickupCutoffTimesRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_getPickupCutoffTimesRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_getPickupCutoffTimesRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "pickupCutoffParameters")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.Tp_getPickupCutoffTimesRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.PickupCutoffTime](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_getPickupCutoffTimesRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.PickupCutoffTime](__obj.pickupCutoffParameters, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("pickupCutoffParameters"), __scope, false))

  }

  trait DefaultStartrackTp_getPickupCutoffTimesResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_getPickupCutoffTimesResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_getPickupCutoffTimesResponse] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "pickupCutoffDetails")) ^^
      { case p1 =>
      org.birchavenue.startrack.Tp_getPickupCutoffTimesResponse(scalaxb.fromXML[org.birchavenue.startrack.LocationCutoffTimeComplex](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_getPickupCutoffTimesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[org.birchavenue.startrack.LocationCutoffTimeComplex](__obj.pickupCutoffDetails, Some("http://startrackexpress/Common/actions/externals/Booking/v1"), Some("pickupCutoffDetails"), __scope, false))

  }

  trait DefaultStartrackPODTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PODType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("PODType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PODType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "image")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "attachment")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.PODType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ImageType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ImageTypable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PODType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.image map { scalaxb.toXML[org.birchavenue.startrack.ImageType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("image"), __scope, false) } getOrElse {Nil},
        __obj.attachment flatMap { scalaxb.toXML[org.birchavenue.startrack.ImageTypable](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("attachment"), __scope, false) })

  }

  trait DefaultStartrackDangerousGoodsTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DangerousGoodsType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("dangerousGoodsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DangerousGoodsType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "subsidiaryClass")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "packagingGroup")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "dgClass")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "lock_seq")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.DangerousGoodsType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@commonName"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@outerPackaging"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@properShippingName"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt]((node \ "@quantity"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt]((node \ "@unNumber"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal]((node \ "@weight"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.DangerousGoodsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "commonName", __obj.commonName.toString, attr)
      attr = scala.xml.Attribute(null, "outerPackaging", __obj.outerPackaging.toString, attr)
      attr = scala.xml.Attribute(null, "properShippingName", __obj.properShippingName.toString, attr)
      attr = scala.xml.Attribute(null, "quantity", __obj.quantity.toString, attr)
      attr = scala.xml.Attribute(null, "unNumber", __obj.unNumber.toString, attr)
      attr = scala.xml.Attribute(null, "weight", __obj.weight.toString, attr)
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.DangerousGoodsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.subsidiaryClass map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("subsidiaryClass"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.packagingGroup, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("packagingGroup"), __scope, false),
        scalaxb.toXML[String](__obj.dgClass, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("dgClass"), __scope, false),
        __obj.lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("lock_seq"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDespatchOptionsTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.DespatchOptionsType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.DespatchOptionsType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.DespatchOptionsType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.DespatchOptionsType((node \ "@closeOnSave").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@confirm").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@consolidate").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@consolidateSendersReference").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@noOfLabels").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@printInternalLabels").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@printLabelsNow").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@printSecondLabels").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@requestService").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.DespatchOptionsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.closeOnSave foreach { x => attr = scala.xml.Attribute(null, "closeOnSave", x.toString, attr) }
      __obj.confirm foreach { x => attr = scala.xml.Attribute(null, "confirm", x.toString, attr) }
      __obj.consolidate foreach { x => attr = scala.xml.Attribute(null, "consolidate", x.toString, attr) }
      __obj.consolidateSendersReference foreach { x => attr = scala.xml.Attribute(null, "consolidateSendersReference", x.toString, attr) }
      __obj.noOfLabels foreach { x => attr = scala.xml.Attribute(null, "noOfLabels", x.toString, attr) }
      __obj.printInternalLabels foreach { x => attr = scala.xml.Attribute(null, "printInternalLabels", x.toString, attr) }
      __obj.printLabelsNow foreach { x => attr = scala.xml.Attribute(null, "printLabelsNow", x.toString, attr) }
      __obj.printSecondLabels foreach { x => attr = scala.xml.Attribute(null, "printSecondLabels", x.toString, attr) }
      __obj.requestService foreach { x => attr = scala.xml.Attribute(null, "requestService", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.DespatchOptionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackDespatchTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DespatchTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("despatchType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DespatchTypeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "receiver")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "sender")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "specialInstructions")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "reference")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "despatchLocationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "despatchOptions")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "lineItems")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.DespatchTypeType(scalaxb.fromXML[org.birchavenue.startrack.ReceiverType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.SenderType](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DespatchOptionsType](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.LineItemType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@adhocReceiver").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@adhocReceiver" -> _ },
        (node \ "@bookInNotAfter").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@bookInNotAfter" -> _ },
        (node \ "@bookInNotBefore").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@bookInNotBefore" -> _ },
        (node \ "@carrierCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@carrierCode" -> _ },
        (node \ "@despatchDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchDate" -> _ },
        (node \ "@despatchNotification").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchNotification" -> _ },
        (node \ "@labelText_1").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText_1" -> _ },
        (node \ "@labelText_2").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText_2" -> _ },
        (node \ "@labelText_3").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText_3" -> _ },
        (node \ "@payerAccountNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@payerAccountNumber" -> _ },
        (node \ "@payerType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@payerType" -> _ },
        (node \ "@quotationNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@quotationNumber" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@userName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@userName" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.DespatchTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@adhocReceiver", _) => __obj.adhocReceiver foreach { x => attr = scala.xml.Attribute(null, "adhocReceiver", x.toString, attr) }
        case ("@bookInNotAfter", _) => __obj.bookInNotAfter foreach { x => attr = scala.xml.Attribute(null, "bookInNotAfter", x.toString, attr) }
        case ("@bookInNotBefore", _) => __obj.bookInNotBefore foreach { x => attr = scala.xml.Attribute(null, "bookInNotBefore", x.toString, attr) }
        case ("@carrierCode", _) => __obj.carrierCode foreach { x => attr = scala.xml.Attribute(null, "carrierCode", x.toString, attr) }
        case ("@despatchDate", _) => attr = scala.xml.Attribute(null, "despatchDate", __obj.despatchDate.toString, attr)
        case ("@despatchNotification", _) => __obj.despatchNotification foreach { x => attr = scala.xml.Attribute(null, "despatchNotification", x.toString, attr) }
        case ("@labelText_1", _) => __obj.labelText_1 foreach { x => attr = scala.xml.Attribute(null, "labelText_1", x.toString, attr) }
        case ("@labelText_2", _) => __obj.labelText_2 foreach { x => attr = scala.xml.Attribute(null, "labelText_2", x.toString, attr) }
        case ("@labelText_3", _) => __obj.labelText_3 foreach { x => attr = scala.xml.Attribute(null, "labelText_3", x.toString, attr) }
        case ("@payerAccountNumber", _) => attr = scala.xml.Attribute(null, "payerAccountNumber", __obj.payerAccountNumber.toString, attr)
        case ("@payerType", _) => __obj.payerType foreach { x => attr = scala.xml.Attribute(null, "payerType", x.toString, attr) }
        case ("@quotationNumber", _) => __obj.quotationNumber foreach { x => attr = scala.xml.Attribute(null, "quotationNumber", x.toString, attr) }
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@userName", _) => __obj.userName foreach { x => attr = scala.xml.Attribute(null, "userName", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.DespatchTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.ReceiverType](__obj.receiver, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("receiver"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.SenderType](__obj.sender, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("sender"), __scope, false),
        __obj.specialInstructions flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("specialInstructions"), __scope, false) },
        __obj.reference flatMap { scalaxb.toXML[org.birchavenue.startrack.ReferenceType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("reference"), __scope, false) },
        scalaxb.toXML[String](__obj.despatchLocationCode, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("despatchLocationCode"), __scope, false),
        __obj.despatchOptions map { scalaxb.toXML[org.birchavenue.startrack.DespatchOptionsType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("despatchOptions"), __scope, false) } getOrElse {Nil},
        __obj.lineItems flatMap { scalaxb.toXML[org.birchavenue.startrack.LineItemType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("lineItems"), __scope, false) })

  }

  trait DefaultStartrackFreightItemTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.FreightItemType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("freightItemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.FreightItemType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "incident")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "reference")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.FreightItemType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@consolidateSenderReference").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@currentTransitState").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@measuredCube").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@status").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@weight").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.FreightItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.consolidateSenderReference foreach { x => attr = scala.xml.Attribute(null, "consolidateSenderReference", x.toString, attr) }
      __obj.currentTransitState foreach { x => attr = scala.xml.Attribute(null, "currentTransitState", x.toString, attr) }
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.measuredCube foreach { x => attr = scala.xml.Attribute(null, "measuredCube", x.toString, attr) }
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      __obj.weight foreach { x => attr = scala.xml.Attribute(null, "weight", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.FreightItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.incident flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("incident"), __scope, false) },
        __obj.reference flatMap { scalaxb.toXML[org.birchavenue.startrack.ReferenceType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("reference"), __scope, false) })

  }

  trait DefaultStartrackImageTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ImageType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("imageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ImageType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "creationDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "imageContent")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "type")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "signatoryName")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.startrack.ImageType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ImageContentType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ImageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.creationDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("creationDateTime"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.imageContent map { scalaxb.toXML[org.birchavenue.startrack.ImageContentType](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("imageContent"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.signatoryName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("signatoryName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackLineItemTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.LineItemType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("lineItemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.LineItemType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "dangerousGoods")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "cost")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "reference")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "lock_seq")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.LineItemType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DangerousGoodsType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@atl").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal]((node \ "@customerCube"), scalaxb.ElemName(node) :: stack),
        (node \ "@customerHeight").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@customerLength").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal]((node \ "@customerWeight"), scalaxb.ElemName(node) :: stack),
        (node \ "@customerWidth").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@etaDttm").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@packagingType"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt]((node \ "@quantity"), scalaxb.ElemName(node) :: stack),
        (node \ "@riskWarrantyValue").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@serviceCode"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.LineItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.atl foreach { x => attr = scala.xml.Attribute(null, "atl", x.toString, attr) }
      attr = scala.xml.Attribute(null, "customerCube", __obj.customerCube.toString, attr)
      __obj.customerHeight foreach { x => attr = scala.xml.Attribute(null, "customerHeight", x.toString, attr) }
      __obj.customerLength foreach { x => attr = scala.xml.Attribute(null, "customerLength", x.toString, attr) }
      attr = scala.xml.Attribute(null, "customerWeight", __obj.customerWeight.toString, attr)
      __obj.customerWidth foreach { x => attr = scala.xml.Attribute(null, "customerWidth", x.toString, attr) }
      __obj.etaDttm foreach { x => attr = scala.xml.Attribute(null, "etaDttm", x.toString, attr) }
      attr = scala.xml.Attribute(null, "packagingType", __obj.packagingType.toString, attr)
      attr = scala.xml.Attribute(null, "quantity", __obj.quantity.toString, attr)
      __obj.riskWarrantyValue foreach { x => attr = scala.xml.Attribute(null, "riskWarrantyValue", x.toString, attr) }
      attr = scala.xml.Attribute(null, "serviceCode", __obj.serviceCode.toString, attr)
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.LineItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dangerousGoods map { scalaxb.toXML[org.birchavenue.startrack.DangerousGoodsType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("dangerousGoods"), __scope, false) } getOrElse {Nil},
        __obj.cost map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("cost"), __scope, false) } getOrElse {Nil},
        __obj.reference flatMap { scalaxb.toXML[org.birchavenue.startrack.ReferenceType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("reference"), __scope, false) },
        __obj.lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("lock_seq"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPickupBookingIdTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupBookingIdType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("pickupBookingIdType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupBookingIdType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "bookingNumber")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "createdDateTime")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.PickupBookingIdType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupBookingIdType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.bookingNumber, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("bookingNumber"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.createdDateTime, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("createdDateTime"), __scope, false))

  }

  trait DefaultStartrackPickupBookingTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupBookingType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("pickupBookingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupBookingType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "userName")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "orgName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "contactName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "contactPhoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "contactEmailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "pickupPoint")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "pickupAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "deliveryAddress")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "closingTime")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "pickupDetails")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "payerAccountNo")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "consignmentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "despatchLocationCode")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "pickupFreightItemGroup")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "despatch_location_lock_seq")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      org.birchavenue.startrack.PickupBookingType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.PickupDetailsType](p10, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.PickupFreightItemGroupTypable](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupBookingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.userName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("userName"), __scope, false) } getOrElse {Nil},
        __obj.orgName flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("orgName"), __scope, false) },
        __obj.contactName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("contactName"), __scope, false) } getOrElse {Nil},
        __obj.contactPhoneNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("contactPhoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.contactEmailAddress map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("contactEmailAddress"), __scope, false) } getOrElse {Nil},
        __obj.pickupPoint map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("pickupPoint"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.startrack.AddressComplex](__obj.pickupAddress, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("pickupAddress"), __scope, false),
        __obj.deliveryAddress map { scalaxb.toXML[org.birchavenue.startrack.AddressComplex](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("deliveryAddress"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.closingTime, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("closingTime"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.PickupDetailsType](__obj.pickupDetails, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("pickupDetails"), __scope, false),
        scalaxb.toXML[String](__obj.payerAccountNo, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("payerAccountNo"), __scope, false),
        __obj.consignmentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("consignmentId"), __scope, false) } getOrElse {Nil},
        __obj.despatchLocationCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("despatchLocationCode"), __scope, false) } getOrElse {Nil},
        __obj.pickupFreightItemGroup flatMap { scalaxb.toXML[org.birchavenue.startrack.PickupFreightItemGroupTypable](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("pickupFreightItemGroup"), __scope, false) },
        __obj.despatch_location_lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("despatch_location_lock_seq"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPickupDetailsTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupDetailsType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("pickupDetailsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupDetailsType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "requestedDate")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "timeReady")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "destination")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "specialInstructions")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.PickupDetailsType(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.TimeReadyType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupDetailsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.requestedDate, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("requestedDate"), __scope, false),
        __obj.timeReady flatMap { scalaxb.toXML[org.birchavenue.startrack.TimeReadyType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("timeReady"), __scope, false) },
        __obj.destination map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("destination"), __scope, false) } getOrElse {Nil},
        __obj.specialInstructions flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("specialInstructions"), __scope, false) })

  }

  trait DefaultStartrackPickupFreightItemGroupFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupFreightItemGroup] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("pickupFreightItemGroup")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupFreightItemGroup] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "quantity")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "weight")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "height")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "width")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "length")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "unitType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "serviceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "serviceType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "serviceRank")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "unitTypeRank")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      org.birchavenue.startrack.PickupFreightItemGroup(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupFreightItemGroup, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.quantity map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.weight map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("weight"), __scope, false) } getOrElse {Nil},
        __obj.height map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("height"), __scope, false) } getOrElse {Nil},
        __obj.width map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("width"), __scope, false) } getOrElse {Nil},
        __obj.length map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("length"), __scope, false) } getOrElse {Nil},
        __obj.unitType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("unitType"), __scope, false) } getOrElse {Nil},
        __obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil},
        __obj.serviceType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("serviceType"), __scope, false) } getOrElse {Nil},
        __obj.serviceRank map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("serviceRank"), __scope, false) } getOrElse {Nil},
        __obj.unitTypeRank map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("unitTypeRank"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPickupFreightItemGroupTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.PickupFreightItemGroupTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.PickupFreightItemGroupTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("pickupFreightItemGroup")) => Right(scalaxb.fromXML[org.birchavenue.startrack.PickupFreightItemGroup](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.PickupFreightItemGroupType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.PickupFreightItemGroupTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.PickupFreightItemGroup => scalaxb.toXML[org.birchavenue.startrack.PickupFreightItemGroup](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.PickupFreightItemGroupType => scalaxb.toXML[org.birchavenue.startrack.PickupFreightItemGroupType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackPickupFreightItemGroupTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupFreightItemGroupType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("pickupFreightItemGroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupFreightItemGroupType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "quantity")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "weight")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "height")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "width")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "length")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "unitType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "serviceCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.PickupFreightItemGroupType(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupFreightItemGroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.quantity map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.weight map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("weight"), __scope, false) } getOrElse {Nil},
        __obj.height map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("height"), __scope, false) } getOrElse {Nil},
        __obj.width map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("width"), __scope, false) } getOrElse {Nil},
        __obj.length map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("length"), __scope, false) } getOrElse {Nil},
        __obj.unitType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("unitType"), __scope, false) } getOrElse {Nil},
        __obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackReceiverTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ReceiverType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("receiverType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ReceiverType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "accountNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "contactDetails")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.ReceiverType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ContactDetailsComplex](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@shortName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.ReceiverType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.shortName foreach { x => attr = scala.xml.Attribute(null, "shortName", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.ReceiverType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("name"), __scope, false) },
        __obj.accountNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("accountNumber"), __scope, false) } getOrElse {Nil},
        __obj.contactDetails flatMap { scalaxb.toXML[org.birchavenue.startrack.ContactDetailsComplex](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("contactDetails"), __scope, false) })

  }

  trait DefaultStartrackReferenceTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ReferenceType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.ReferenceType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ReferenceType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.ReferenceType((node \ "@lock_seq").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@printOnLabel").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@priority").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@value").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.ReferenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.printOnLabel foreach { x => attr = scala.xml.Attribute(null, "printOnLabel", x.toString, attr) }
      __obj.priority foreach { x => attr = scala.xml.Attribute(null, "priority", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      __obj.value foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackRequestorTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.RequestorType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("requestorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.RequestorType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "orgName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "emailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "phoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "contactName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "payerAccountNumber")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.startrack.RequestorType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.RequestorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.orgName flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("orgName"), __scope, false) },
        __obj.emailAddress map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("emailAddress"), __scope, false) } getOrElse {Nil},
        __obj.phoneNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("phoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.contactName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("contactName"), __scope, false) } getOrElse {Nil},
        __obj.payerAccountNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("payerAccountNumber"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackSenderTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.SenderType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("senderType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.SenderType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "accountNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "contactDetails")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.SenderType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ContactDetailsComplex](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@shortName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.SenderType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.shortName foreach { x => attr = scala.xml.Attribute(null, "shortName", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.SenderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("name"), __scope, false) },
        __obj.accountNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("accountNumber"), __scope, false) } getOrElse {Nil},
        __obj.contactDetails flatMap { scalaxb.toXML[org.birchavenue.startrack.ContactDetailsComplex](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("contactDetails"), __scope, false) })

  }

  trait DefaultStartrackTimeReadyTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.TimeReadyType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("timeReadyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.TimeReadyType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "serviceType")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "time")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.TimeReadyType(scalaxb.fromXML[org.birchavenue.startrack.ServiceTypeEnum](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.TimeReadyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.ServiceTypeEnum](__obj.serviceType, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("serviceType"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.time, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("time"), __scope, false))

  }

  trait DefaultStartrackUpdateDangerousGoodsTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.UpdateDangerousGoodsType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.UpdateDangerousGoodsType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.UpdateDangerousGoodsType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.UpdateDangerousGoodsType((node \ "@lock_seq").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt]((node \ "@quantity"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal]((node \ "@weight"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.UpdateDangerousGoodsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
      attr = scala.xml.Attribute(null, "quantity", __obj.quantity.toString, attr)
      attr = scala.xml.Attribute(null, "weight", __obj.weight.toString, attr)
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.UpdateDangerousGoodsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackUpdateDespatchTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.UpdateDespatchType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("updateDespatchType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.UpdateDespatchType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "consignmentId")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "despatchLocationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "updateStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "userName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "labelText")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "labelText_2")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "labelText_3")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "specialInstructions")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "lock_seq")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "reference")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "lineItems")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "despatchOptions")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      org.birchavenue.startrack.UpdateDespatchType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }},
        p6.headOption map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }},
        p7.headOption map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }},
        p8.toSeq map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }},
        scalaxb.fromXML[String](p9, scalaxb.ElemName(node) :: stack),
        p10.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.UpdateReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.UpdateLineItems](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DespatchOptionsType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.UpdateDespatchType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.consignmentId, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("consignmentId"), __scope, false),
        scalaxb.toXML[String](__obj.despatchLocationCode, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("despatchLocationCode"), __scope, false),
        __obj.updateStatus map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("updateStatus"), __scope, false) } getOrElse {Nil},
        __obj.userName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("userName"), __scope, false) } getOrElse {Nil},
        __obj.labelText map { scalaxb.toXML[Option[String]](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("labelText"), __scope, false) } getOrElse {Nil},
        __obj.labelText_2 map { scalaxb.toXML[Option[String]](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("labelText_2"), __scope, false) } getOrElse {Nil},
        __obj.labelText_3 map { scalaxb.toXML[Option[String]](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("labelText_3"), __scope, false) } getOrElse {Nil},
        __obj.specialInstructions flatMap { scalaxb.toXML[Option[String]](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("specialInstructions"), __scope, false) },
        scalaxb.toXML[String](__obj.lock_seq, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("lock_seq"), __scope, false),
        __obj.reference flatMap { scalaxb.toXML[org.birchavenue.startrack.UpdateReferenceType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("reference"), __scope, false) },
        __obj.lineItems flatMap { scalaxb.toXML[org.birchavenue.startrack.UpdateLineItems](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("lineItems"), __scope, false) },
        __obj.despatchOptions map { scalaxb.toXML[org.birchavenue.startrack.DespatchOptionsType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("despatchOptions"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackUpdateLineItemTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.UpdateLineItemTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.UpdateLineItemTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("updateLineItems")) => Right(scalaxb.fromXML[org.birchavenue.startrack.UpdateLineItems](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.UpdateLineItemType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.UpdateLineItemTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.UpdateLineItems => scalaxb.toXML[org.birchavenue.startrack.UpdateLineItems](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.UpdateLineItemType => scalaxb.toXML[org.birchavenue.startrack.UpdateLineItemType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackUpdateLineItemTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.UpdateLineItemType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("updateLineItemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.UpdateLineItemType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "dangerousGoods")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "reference")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "cost")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "lock_seq")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.UpdateLineItemType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.UpdateDangerousGoodsType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.UpdateReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        (node \ "@atl").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal]((node \ "@customerCube"), scalaxb.ElemName(node) :: stack),
        (node \ "@customerHeight").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@customerLength").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal]((node \ "@customerWeight"), scalaxb.ElemName(node) :: stack),
        (node \ "@customerWidth").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@etaDttm").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt]((node \ "@lineNumber"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@packagingType"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt]((node \ "@quantity"), scalaxb.ElemName(node) :: stack),
        (node \ "@riskWarrantyValue").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@serviceCode"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.UpdateLineItemType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.atl foreach { x => attr = scala.xml.Attribute(null, "atl", x.toString, attr) }
      attr = scala.xml.Attribute(null, "customerCube", __obj.customerCube.toString, attr)
      __obj.customerHeight foreach { x => attr = scala.xml.Attribute(null, "customerHeight", x.toString, attr) }
      __obj.customerLength foreach { x => attr = scala.xml.Attribute(null, "customerLength", x.toString, attr) }
      attr = scala.xml.Attribute(null, "customerWeight", __obj.customerWeight.toString, attr)
      __obj.customerWidth foreach { x => attr = scala.xml.Attribute(null, "customerWidth", x.toString, attr) }
      __obj.etaDttm foreach { x => attr = scala.xml.Attribute(null, "etaDttm", x.toString, attr) }
      attr = scala.xml.Attribute(null, "lineNumber", __obj.lineNumber.toString, attr)
      attr = scala.xml.Attribute(null, "packagingType", __obj.packagingType.toString, attr)
      attr = scala.xml.Attribute(null, "quantity", __obj.quantity.toString, attr)
      __obj.riskWarrantyValue foreach { x => attr = scala.xml.Attribute(null, "riskWarrantyValue", x.toString, attr) }
      attr = scala.xml.Attribute(null, "serviceCode", __obj.serviceCode.toString, attr)
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.UpdateLineItemType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dangerousGoods map { scalaxb.toXML[org.birchavenue.startrack.UpdateDangerousGoodsType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("dangerousGoods"), __scope, false) } getOrElse {Nil},
        __obj.reference flatMap { scalaxb.toXML[org.birchavenue.startrack.UpdateReferenceType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("reference"), __scope, false) },
        __obj.cost map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("cost"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.lock_seq, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("lock_seq"), __scope, false))

  }

  trait DefaultStartrackUpdateLineItemsFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.UpdateLineItems] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("updateLineItems")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.UpdateLineItems] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "dangerousGoods")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "reference")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "cost")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "lock_seq")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "opCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.startrack.UpdateLineItems(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.UpdateDangerousGoodsType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.UpdateReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.OpCodeEnum](p5, scalaxb.ElemName(node) :: stack),
        (node \ "@atl").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal]((node \ "@customerCube"), scalaxb.ElemName(node) :: stack),
        (node \ "@customerHeight").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@customerLength").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal]((node \ "@customerWeight"), scalaxb.ElemName(node) :: stack),
        (node \ "@customerWidth").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@etaDttm").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt]((node \ "@lineNumber"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@packagingType"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt]((node \ "@quantity"), scalaxb.ElemName(node) :: stack),
        (node \ "@riskWarrantyValue").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@serviceCode"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.UpdateLineItems, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.atl foreach { x => attr = scala.xml.Attribute(null, "atl", x.toString, attr) }
      attr = scala.xml.Attribute(null, "customerCube", __obj.customerCube.toString, attr)
      __obj.customerHeight foreach { x => attr = scala.xml.Attribute(null, "customerHeight", x.toString, attr) }
      __obj.customerLength foreach { x => attr = scala.xml.Attribute(null, "customerLength", x.toString, attr) }
      attr = scala.xml.Attribute(null, "customerWeight", __obj.customerWeight.toString, attr)
      __obj.customerWidth foreach { x => attr = scala.xml.Attribute(null, "customerWidth", x.toString, attr) }
      __obj.etaDttm foreach { x => attr = scala.xml.Attribute(null, "etaDttm", x.toString, attr) }
      attr = scala.xml.Attribute(null, "lineNumber", __obj.lineNumber.toString, attr)
      attr = scala.xml.Attribute(null, "packagingType", __obj.packagingType.toString, attr)
      attr = scala.xml.Attribute(null, "quantity", __obj.quantity.toString, attr)
      __obj.riskWarrantyValue foreach { x => attr = scala.xml.Attribute(null, "riskWarrantyValue", x.toString, attr) }
      attr = scala.xml.Attribute(null, "serviceCode", __obj.serviceCode.toString, attr)
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.UpdateLineItems, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dangerousGoods map { scalaxb.toXML[org.birchavenue.startrack.UpdateDangerousGoodsType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("dangerousGoods"), __scope, false) } getOrElse {Nil},
        __obj.reference flatMap { scalaxb.toXML[org.birchavenue.startrack.UpdateReferenceType](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("reference"), __scope, false) },
        __obj.cost map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("cost"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.lock_seq, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("lock_seq"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.OpCodeEnum](__obj.opCode, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("opCode"), __scope, false))

  }

  trait DefaultStartrackUpdateReferenceTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.UpdateReferenceType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightDespatching/v1")
    
    override def typeName: Option[String] = Some("updateReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.UpdateReferenceType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "opCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "newValue")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/FreightDespatching/v1"), "reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.UpdateReferenceType(scalaxb.fromXML[org.birchavenue.startrack.OpCodeEnum](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.ReferenceType](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.UpdateReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.OpCodeEnum](__obj.opCode, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("opCode"), __scope, false),
        __obj.newValue map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("newValue"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.startrack.ReferenceType](__obj.reference, Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("reference"), __scope, false))

  }

  trait DefaultStartrackDGTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DGType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("DGType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DGType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "subsidiaryClass")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "packagingGroup")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "dgClass")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.DGType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@commonName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@finalDGDeclarationPrintedDateTime").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@lock_seq").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@outerPackaging").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@properShippingName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@unNumber").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.DGType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.commonName foreach { x => attr = scala.xml.Attribute(null, "commonName", x.toString, attr) }
      __obj.finalDGDeclarationPrintedDateTime foreach { x => attr = scala.xml.Attribute(null, "finalDGDeclarationPrintedDateTime", x.toString, attr) }
      __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
      __obj.outerPackaging foreach { x => attr = scala.xml.Attribute(null, "outerPackaging", x.toString, attr) }
      __obj.properShippingName foreach { x => attr = scala.xml.Attribute(null, "properShippingName", x.toString, attr) }
      __obj.unNumber foreach { x => attr = scala.xml.Attribute(null, "unNumber", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.DGType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.subsidiaryClass map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("subsidiaryClass"), __scope, false) } getOrElse {Nil},
        __obj.packagingGroup map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("packagingGroup"), __scope, false) } getOrElse {Nil},
        __obj.dgClass map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("dgClass"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPODTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PODTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("PODType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PODTypeType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "image")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "attachment")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.PODTypeType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ImageTypable](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ImageTypable](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PODTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.image map { scalaxb.toXML[org.birchavenue.startrack.ImageTypable](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("image"), __scope, false) } getOrElse {Nil},
        __obj.attachment flatMap { scalaxb.toXML[org.birchavenue.startrack.ImageTypable](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("attachment"), __scope, false) })

  }

  trait DefaultStartrackConsignmentTrackingEventTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ConsignmentTrackingEventType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("consignmentTrackingEventType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ConsignmentTrackingEventType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "scanner")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "vehicle")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "scanMode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "transitState")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.ConsignmentTrackingEventType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ScannerType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.VehicleType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@eventDateTime").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@manualEvent").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@user").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@quantityDelivered").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@quantityOnHand").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@scanningDepot").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@signatoryName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@signatureImageContent").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@statusDescription").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.ConsignmentTrackingEventType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.eventDateTime foreach { x => attr = scala.xml.Attribute(null, "eventDateTime", x.toString, attr) }
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.manualEvent foreach { x => attr = scala.xml.Attribute(null, "manualEvent", x.toString, attr) }
      __obj.user foreach { x => attr = scala.xml.Attribute(null, "user", x.toString, attr) }
      __obj.quantityDelivered foreach { x => attr = scala.xml.Attribute(null, "quantityDelivered", x.toString, attr) }
      __obj.quantityOnHand foreach { x => attr = scala.xml.Attribute(null, "quantityOnHand", x.toString, attr) }
      __obj.scanningDepot foreach { x => attr = scala.xml.Attribute(null, "scanningDepot", x.toString, attr) }
      __obj.signatoryName foreach { x => attr = scala.xml.Attribute(null, "signatoryName", x.toString, attr) }
      __obj.signatureImageContent foreach { x => attr = scala.xml.Attribute(null, "signatureImageContent", x.toString, attr) }
      __obj.statusDescription foreach { x => attr = scala.xml.Attribute(null, "statusDescription", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.ConsignmentTrackingEventType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.scanner map { scalaxb.toXML[org.birchavenue.startrack.ScannerType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("scanner"), __scope, false) } getOrElse {Nil},
        __obj.vehicle map { scalaxb.toXML[org.birchavenue.startrack.VehicleType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("vehicle"), __scope, false) } getOrElse {Nil},
        __obj.scanMode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("scanMode"), __scope, false) } getOrElse {Nil},
        __obj.transitState map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("transitState"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackConsignmentTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ConsignmentType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("consignmentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ConsignmentType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "references")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "serviceCode")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "secondaryQcCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "receiver")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "sender")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "specialInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "despatchLocationCode")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "statusHistory")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "trackingEvents")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "lineItems")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "team_locatn")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "image")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "dangerousGoods")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      org.birchavenue.startrack.ConsignmentType(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ReferenceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.startrack.SenderTypeType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ReceiverTypeType](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.StatusHistoryType](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ConsignmentTrackingEventType](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.LineItemTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[org.birchavenue.startrack.TeamLocationType](_, scalaxb.ElemName(node) :: stack) },
        p12.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ImageTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DGType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@billedInd").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@billedInd" -> _ },
        (node \ "@bookInNotAfter").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@bookInNotAfter" -> _ },
        (node \ "@bookInNotBefore").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@bookInNotBefore" -> _ },
        (node \ "@carrierCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@carrierCode" -> _ },
        (node \ "@consolidate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@consolidate" -> _ },
        (node \ "@consolidateSendersReference").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@consolidateSendersReference" -> _ },
        (node \ "@creationDateTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@creationDateTime" -> _ },
        (node \ "@deliveryDepot").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@deliveryDepot" -> _ },
        (node \ "@despatchDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchDate" -> _ },
        (node \ "@despatchDepot").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchDepot" -> _ },
        (node \ "@despatchNotification").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchNotification" -> _ },
        (node \ "@despatchSummaryId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchSummaryId" -> _ },
        (node \ "@driverCube").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@driverCube" -> _ },
        (node \ "@etaDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@etaDate" -> _ },
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@labelText").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText" -> _ },
        (node \ "@labelText_2").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText_2" -> _ },
        (node \ "@labelText_3").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText_3" -> _ },
        (node \ "@lastStatusDateTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@lastStatusDateTime" -> _ },
        (node \ "@lock_seq").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lock_seq" -> _ },
        (node \ "@payerAccountNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@payerAccountNumber" -> _ },
        (node \ "@payerType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@payerType" -> _ },
        (node \ "@podSignatoryName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@podSignatoryName" -> _ },
        (node \ "@podSignature").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@podSignature" -> _ },
        (node \ "@publishedQcCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@publishedQcCode" -> _ },
        (node \ "@quotationNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@quotationNumber" -> _ },
        (node \ "@requestService").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@requestService" -> _ },
        (node \ "@source").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@source" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@status" -> _ },
        (node \ "@totalQuantity").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@totalQuantity" -> _ },
        (node \ "@totalVolume").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@totalVolume" -> _ },
        (node \ "@totalWeight").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@totalWeight" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@unitType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@unitType" -> _ },
        (node \ "@userName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@userName" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.ConsignmentType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@billedInd", _) => __obj.billedInd foreach { x => attr = scala.xml.Attribute(null, "billedInd", x.toString, attr) }
        case ("@bookInNotAfter", _) => __obj.bookInNotAfter foreach { x => attr = scala.xml.Attribute(null, "bookInNotAfter", x.toString, attr) }
        case ("@bookInNotBefore", _) => __obj.bookInNotBefore foreach { x => attr = scala.xml.Attribute(null, "bookInNotBefore", x.toString, attr) }
        case ("@carrierCode", _) => __obj.carrierCode foreach { x => attr = scala.xml.Attribute(null, "carrierCode", x.toString, attr) }
        case ("@consolidate", _) => __obj.consolidate foreach { x => attr = scala.xml.Attribute(null, "consolidate", x.toString, attr) }
        case ("@consolidateSendersReference", _) => __obj.consolidateSendersReference foreach { x => attr = scala.xml.Attribute(null, "consolidateSendersReference", x.toString, attr) }
        case ("@creationDateTime", _) => __obj.creationDateTime foreach { x => attr = scala.xml.Attribute(null, "creationDateTime", x.toString, attr) }
        case ("@deliveryDepot", _) => __obj.deliveryDepot foreach { x => attr = scala.xml.Attribute(null, "deliveryDepot", x.toString, attr) }
        case ("@despatchDate", _) => __obj.despatchDate foreach { x => attr = scala.xml.Attribute(null, "despatchDate", x.toString, attr) }
        case ("@despatchDepot", _) => __obj.despatchDepot foreach { x => attr = scala.xml.Attribute(null, "despatchDepot", x.toString, attr) }
        case ("@despatchNotification", _) => __obj.despatchNotification foreach { x => attr = scala.xml.Attribute(null, "despatchNotification", x.toString, attr) }
        case ("@despatchSummaryId", _) => __obj.despatchSummaryId foreach { x => attr = scala.xml.Attribute(null, "despatchSummaryId", x.toString, attr) }
        case ("@driverCube", _) => __obj.driverCube foreach { x => attr = scala.xml.Attribute(null, "driverCube", x.toString, attr) }
        case ("@etaDate", _) => __obj.etaDate foreach { x => attr = scala.xml.Attribute(null, "etaDate", x.toString, attr) }
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@labelText", _) => __obj.labelText foreach { x => attr = scala.xml.Attribute(null, "labelText", x.toString, attr) }
        case ("@labelText_2", _) => __obj.labelText_2 foreach { x => attr = scala.xml.Attribute(null, "labelText_2", x.toString, attr) }
        case ("@labelText_3", _) => __obj.labelText_3 foreach { x => attr = scala.xml.Attribute(null, "labelText_3", x.toString, attr) }
        case ("@lastStatusDateTime", _) => __obj.lastStatusDateTime foreach { x => attr = scala.xml.Attribute(null, "lastStatusDateTime", x.toString, attr) }
        case ("@lock_seq", _) => __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
        case ("@payerAccountNumber", _) => __obj.payerAccountNumber foreach { x => attr = scala.xml.Attribute(null, "payerAccountNumber", x.toString, attr) }
        case ("@payerType", _) => __obj.payerType foreach { x => attr = scala.xml.Attribute(null, "payerType", x.toString, attr) }
        case ("@podSignatoryName", _) => __obj.podSignatoryName foreach { x => attr = scala.xml.Attribute(null, "podSignatoryName", x.toString, attr) }
        case ("@podSignature", _) => __obj.podSignature foreach { x => attr = scala.xml.Attribute(null, "podSignature", x.toString, attr) }
        case ("@publishedQcCode", _) => __obj.publishedQcCode foreach { x => attr = scala.xml.Attribute(null, "publishedQcCode", x.toString, attr) }
        case ("@quotationNumber", _) => __obj.quotationNumber foreach { x => attr = scala.xml.Attribute(null, "quotationNumber", x.toString, attr) }
        case ("@requestService", _) => __obj.requestService foreach { x => attr = scala.xml.Attribute(null, "requestService", x.toString, attr) }
        case ("@source", _) => __obj.source foreach { x => attr = scala.xml.Attribute(null, "source", x.toString, attr) }
        case ("@status", _) => __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
        case ("@totalQuantity", _) => __obj.totalQuantity foreach { x => attr = scala.xml.Attribute(null, "totalQuantity", x.toString, attr) }
        case ("@totalVolume", _) => __obj.totalVolume foreach { x => attr = scala.xml.Attribute(null, "totalVolume", x.toString, attr) }
        case ("@totalWeight", _) => __obj.totalWeight foreach { x => attr = scala.xml.Attribute(null, "totalWeight", x.toString, attr) }
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case ("@unitType", _) => __obj.unitType foreach { x => attr = scala.xml.Attribute(null, "unitType", x.toString, attr) }
        case ("@userName", _) => __obj.userName foreach { x => attr = scala.xml.Attribute(null, "userName", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.ConsignmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.references flatMap { scalaxb.toXML[org.birchavenue.startrack.ReferenceTypeType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("references"), __scope, false) },
        __obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil},
        __obj.secondaryQcCode flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("secondaryQcCode"), __scope, false) },
        __obj.receiver map { scalaxb.toXML[org.birchavenue.startrack.SenderTypeType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("receiver"), __scope, false) } getOrElse {Nil},
        __obj.sender map { scalaxb.toXML[org.birchavenue.startrack.ReceiverTypeType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("sender"), __scope, false) } getOrElse {Nil},
        __obj.specialInstructions flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("specialInstructions"), __scope, false) },
        __obj.despatchLocationCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("despatchLocationCode"), __scope, false) } getOrElse {Nil},
        __obj.statusHistory flatMap { scalaxb.toXML[org.birchavenue.startrack.StatusHistoryType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("statusHistory"), __scope, false) },
        __obj.trackingEvents flatMap { scalaxb.toXML[org.birchavenue.startrack.ConsignmentTrackingEventType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("trackingEvents"), __scope, false) },
        __obj.lineItems flatMap { scalaxb.toXML[org.birchavenue.startrack.LineItemTypeType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("lineItems"), __scope, false) },
        __obj.team_locatn map { scalaxb.toXML[org.birchavenue.startrack.TeamLocationType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("team_locatn"), __scope, false) } getOrElse {Nil},
        __obj.image flatMap { scalaxb.toXML[org.birchavenue.startrack.ImageTypeType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("image"), __scope, false) },
        __obj.dangerousGoods map { scalaxb.toXML[org.birchavenue.startrack.DGType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("dangerousGoods"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDangerousGoodsTypeTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.DangerousGoodsTypeType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.DangerousGoodsTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.DangerousGoodsTypeType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.DangerousGoodsTypeType((node \ "@interimDGPrinted").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@lock_seq").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@quantity").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@weight").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.DangerousGoodsTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.interimDGPrinted foreach { x => attr = scala.xml.Attribute(null, "interimDGPrinted", x.toString, attr) }
      __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
      __obj.quantity foreach { x => attr = scala.xml.Attribute(null, "quantity", x.toString, attr) }
      __obj.weight foreach { x => attr = scala.xml.Attribute(null, "weight", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.DangerousGoodsTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackDepotTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DepotType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("depotType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DepotType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "code")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "abvreviation")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "latitude")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "longitude")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "adminDepotCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.startrack.DepotType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DepotType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.code map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.abvreviation map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("abvreviation"), __scope, false) } getOrElse {Nil},
        __obj.latitude map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("latitude"), __scope, false) } getOrElse {Nil},
        __obj.longitude map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("longitude"), __scope, false) } getOrElse {Nil},
        __obj.adminDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("adminDepotCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackFreightItemTrackingEventTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.FreightItemTrackingEventType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("freightItemTrackingEventType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.FreightItemTrackingEventType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "scanner")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "vehicle")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.FreightItemTrackingEventType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ScannerType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.VehicleType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@eventDateTime").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@manualEvent").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@user").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@lane").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@scanMode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@sortCode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@statusDescription").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@transitState").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.FreightItemTrackingEventType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.eventDateTime foreach { x => attr = scala.xml.Attribute(null, "eventDateTime", x.toString, attr) }
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.manualEvent foreach { x => attr = scala.xml.Attribute(null, "manualEvent", x.toString, attr) }
      __obj.user foreach { x => attr = scala.xml.Attribute(null, "user", x.toString, attr) }
      __obj.lane foreach { x => attr = scala.xml.Attribute(null, "lane", x.toString, attr) }
      __obj.scanMode foreach { x => attr = scala.xml.Attribute(null, "scanMode", x.toString, attr) }
      __obj.sortCode foreach { x => attr = scala.xml.Attribute(null, "sortCode", x.toString, attr) }
      __obj.statusDescription foreach { x => attr = scala.xml.Attribute(null, "statusDescription", x.toString, attr) }
      __obj.transitState foreach { x => attr = scala.xml.Attribute(null, "transitState", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.FreightItemTrackingEventType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.scanner map { scalaxb.toXML[org.birchavenue.startrack.ScannerType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("scanner"), __scope, false) } getOrElse {Nil},
        __obj.vehicle map { scalaxb.toXML[org.birchavenue.startrack.VehicleType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("vehicle"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackFreightItemTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.FreightItemTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("freightItemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.FreightItemTypeType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "freightItemTrackingEvent")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "statusHistory")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "printStatus")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "incident")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.FreightItemTypeType(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.FreightItemTrackingEventType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.StatusHistoryType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[org.birchavenue.startrack.PrintStatusType](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@cost").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@currentTransitState").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@etaDttm").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@lock_seq").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@measuredCube").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@measuredWeight").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@riskWarrantyValue").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@sequenceNumber").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@status").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.FreightItemTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.cost foreach { x => attr = scala.xml.Attribute(null, "cost", x.toString, attr) }
      __obj.currentTransitState foreach { x => attr = scala.xml.Attribute(null, "currentTransitState", x.toString, attr) }
      __obj.etaDttm foreach { x => attr = scala.xml.Attribute(null, "etaDttm", x.toString, attr) }
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
      __obj.measuredCube foreach { x => attr = scala.xml.Attribute(null, "measuredCube", x.toString, attr) }
      __obj.measuredWeight foreach { x => attr = scala.xml.Attribute(null, "measuredWeight", x.toString, attr) }
      __obj.riskWarrantyValue foreach { x => attr = scala.xml.Attribute(null, "riskWarrantyValue", x.toString, attr) }
      __obj.sequenceNumber foreach { x => attr = scala.xml.Attribute(null, "sequenceNumber", x.toString, attr) }
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.FreightItemTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.freightItemTrackingEvent flatMap { scalaxb.toXML[org.birchavenue.startrack.FreightItemTrackingEventType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("freightItemTrackingEvent"), __scope, false) },
        __obj.statusHistory flatMap { scalaxb.toXML[org.birchavenue.startrack.StatusHistoryType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("statusHistory"), __scope, false) },
        __obj.printStatus map { scalaxb.toXML[org.birchavenue.startrack.PrintStatusType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("printStatus"), __scope, false) } getOrElse {Nil},
        __obj.incident flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("incident"), __scope, false) })

  }

  trait DefaultStartrackImageTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ImageTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("imageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ImageTypeType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "creationDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "imageContent")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "type")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "signatoryName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "cartridge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "frame")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "consignmentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "isPOD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      org.birchavenue.startrack.ImageTypeType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ImageContentType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ImageTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.creationDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("creationDateTime"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.imageContent map { scalaxb.toXML[org.birchavenue.startrack.ImageContentType](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("imageContent"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.signatoryName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("signatoryName"), __scope, false) } getOrElse {Nil},
        __obj.cartridge map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("cartridge"), __scope, false) } getOrElse {Nil},
        __obj.frame map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("frame"), __scope, false) } getOrElse {Nil},
        __obj.consignmentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("consignmentId"), __scope, false) } getOrElse {Nil},
        __obj.isPOD map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("isPOD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackLineItemTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.LineItemTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("lineItemType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.LineItemTypeType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "dangerousGoods")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "freightItem")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "references")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.LineItemTypeType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DangerousGoodsTypeType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.FreightItemTypeType](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ReferenceTypeType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@UOM").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@cube").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@interimDespatchInd").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@lineNumber").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@lock_seq").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@noOfLabels").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@packagingType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@printInternalLabels").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@printLabelsNow").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@printSecondLabels").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@quantity").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@riskWarrantyLevel").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@unitType").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@weight").headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.LineItemTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.UOM foreach { x => attr = scala.xml.Attribute(null, "UOM", x.toString, attr) }
      __obj.cube foreach { x => attr = scala.xml.Attribute(null, "cube", x.toString, attr) }
      __obj.interimDespatchInd foreach { x => attr = scala.xml.Attribute(null, "interimDespatchInd", x.toString, attr) }
      __obj.lineNumber foreach { x => attr = scala.xml.Attribute(null, "lineNumber", x.toString, attr) }
      __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
      __obj.noOfLabels foreach { x => attr = scala.xml.Attribute(null, "noOfLabels", x.toString, attr) }
      __obj.packagingType foreach { x => attr = scala.xml.Attribute(null, "packagingType", x.toString, attr) }
      __obj.printInternalLabels foreach { x => attr = scala.xml.Attribute(null, "printInternalLabels", x.toString, attr) }
      __obj.printLabelsNow foreach { x => attr = scala.xml.Attribute(null, "printLabelsNow", x.toString, attr) }
      __obj.printSecondLabels foreach { x => attr = scala.xml.Attribute(null, "printSecondLabels", x.toString, attr) }
      __obj.quantity foreach { x => attr = scala.xml.Attribute(null, "quantity", x.toString, attr) }
      __obj.riskWarrantyLevel foreach { x => attr = scala.xml.Attribute(null, "riskWarrantyLevel", x.toString, attr) }
      __obj.unitType foreach { x => attr = scala.xml.Attribute(null, "unitType", x.toString, attr) }
      __obj.weight foreach { x => attr = scala.xml.Attribute(null, "weight", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.LineItemTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.dangerousGoods map { scalaxb.toXML[org.birchavenue.startrack.DangerousGoodsTypeType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("dangerousGoods"), __scope, false) } getOrElse {Nil},
        __obj.freightItem flatMap { scalaxb.toXML[org.birchavenue.startrack.FreightItemTypeType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("freightItem"), __scope, false) },
        __obj.references flatMap { scalaxb.toXML[org.birchavenue.startrack.ReferenceTypeType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("references"), __scope, false) })

  }

  trait DefaultStartrackPersonTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.PersonType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.PersonType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.PersonType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.PersonType((node \ "@location").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.PersonType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.location foreach { x => attr = scala.xml.Attribute(null, "location", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.PersonType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackPrintStatusTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.PrintStatusType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.PrintStatusType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.PrintStatusType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.PrintStatusType((node \ "@printedInd").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@reprintedInd").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.PrintStatusType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.printedInd foreach { x => attr = scala.xml.Attribute(null, "printedInd", x.toString, attr) }
      __obj.reprintedInd foreach { x => attr = scala.xml.Attribute(null, "reprintedInd", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.PrintStatusType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackReceiverTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ReceiverTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("receiverType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ReceiverTypeType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "accountNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "contactDetails")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.ReceiverTypeType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ContactDetailsComplex](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@shortName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.ReceiverTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.shortName foreach { x => attr = scala.xml.Attribute(null, "shortName", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.ReceiverTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("name"), __scope, false) },
        __obj.accountNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("accountNumber"), __scope, false) } getOrElse {Nil},
        __obj.contactDetails flatMap { scalaxb.toXML[org.birchavenue.startrack.ContactDetailsComplex](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("contactDetails"), __scope, false) })

  }

  trait DefaultStartrackReferenceTypeTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ReferenceTypeType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.ReferenceTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ReferenceTypeType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.ReferenceTypeType((node \ "@lock_seq").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@printOnLabel").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@priority").headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@value").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.ReferenceTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.printOnLabel foreach { x => attr = scala.xml.Attribute(null, "printOnLabel", x.toString, attr) }
      __obj.priority foreach { x => attr = scala.xml.Attribute(null, "priority", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      __obj.value foreach { x => attr = scala.xml.Attribute(null, "value", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.ReferenceTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackScannerTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ScannerType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.ScannerType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ScannerType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.ScannerType((node \ "@depotCode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.ScannerType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.depotCode foreach { x => attr = scala.xml.Attribute(null, "depotCode", x.toString, attr) }
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.ScannerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackSenderTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.SenderTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("senderType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.SenderTypeType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "accountNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "contactDetails")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.SenderTypeType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ContactDetailsComplex](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@shortName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.SenderTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.shortName foreach { x => attr = scala.xml.Attribute(null, "shortName", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.SenderTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("name"), __scope, false) },
        __obj.accountNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("accountNumber"), __scope, false) } getOrElse {Nil},
        __obj.contactDetails flatMap { scalaxb.toXML[org.birchavenue.startrack.ContactDetailsComplex](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("contactDetails"), __scope, false) })

  }

  trait DefaultStartrackStatusHistoryTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.StatusHistoryType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("statusHistoryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.StatusHistoryType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "user")) ^^
      { case p1 =>
      org.birchavenue.startrack.StatusHistoryType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.UserStatusHistoryType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@dateTime").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@scanningDepot").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@signatoryName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@status").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.StatusHistoryType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.dateTime foreach { x => attr = scala.xml.Attribute(null, "dateTime", x.toString, attr) }
      __obj.scanningDepot foreach { x => attr = scala.xml.Attribute(null, "scanningDepot", x.toString, attr) }
      __obj.signatoryName foreach { x => attr = scala.xml.Attribute(null, "signatoryName", x.toString, attr) }
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.StatusHistoryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.user map { scalaxb.toXML[org.birchavenue.startrack.UserStatusHistoryType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("user"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackTeamLocationTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.TeamLocationType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.TeamLocationType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.TeamLocationType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.TeamLocationType((node \ "@prim_air_depot").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@secnd_air_depot").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.TeamLocationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.prim_air_depot foreach { x => attr = scala.xml.Attribute(null, "prim_air_depot", x.toString, attr) }
      __obj.secnd_air_depot foreach { x => attr = scala.xml.Attribute(null, "secnd_air_depot", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.TeamLocationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackTrackingEventTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.TrackingEventTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.TrackingEventTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("consignmentTrackingEventType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.ConsignmentTrackingEventType](node, stack))
          case (Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("freightItemTrackingEventType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.FreightItemTrackingEventType](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.TrackingEventType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.TrackingEventTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.ConsignmentTrackingEventType => scalaxb.toXML[org.birchavenue.startrack.ConsignmentTrackingEventType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.FreightItemTrackingEventType => scalaxb.toXML[org.birchavenue.startrack.FreightItemTrackingEventType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.TrackingEventType => scalaxb.toXML[org.birchavenue.startrack.TrackingEventType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackTrackingEventTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.TrackingEventType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    override def typeName: Option[String] = Some("trackingEventType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.TrackingEventType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "scanner")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/FreightProcessing/v1"), "vehicle")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.TrackingEventType(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ScannerType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.VehicleType](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@eventDateTime").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@manualEvent").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@user").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.TrackingEventType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.eventDateTime foreach { x => attr = scala.xml.Attribute(null, "eventDateTime", x.toString, attr) }
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.manualEvent foreach { x => attr = scala.xml.Attribute(null, "manualEvent", x.toString, attr) }
      __obj.user foreach { x => attr = scala.xml.Attribute(null, "user", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.TrackingEventType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.scanner map { scalaxb.toXML[org.birchavenue.startrack.ScannerType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("scanner"), __scope, false) } getOrElse {Nil},
        __obj.vehicle map { scalaxb.toXML[org.birchavenue.startrack.VehicleType](_, Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("vehicle"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackUserStatusHistoryTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.UserStatusHistoryType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.UserStatusHistoryType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.UserStatusHistoryType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.UserStatusHistoryType((node \ "@dateTime").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@status").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@user").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.UserStatusHistoryType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.dateTime foreach { x => attr = scala.xml.Attribute(null, "dateTime", x.toString, attr) }
      __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
      __obj.user foreach { x => attr = scala.xml.Attribute(null, "user", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.UserStatusHistoryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackVehicleTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.VehicleType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.VehicleType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/FreightProcessing/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.VehicleType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.VehicleType((node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.VehicleType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.VehicleType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackChoiceTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ChoiceType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1")
    
    override def typeName: Option[String] = Some("choiceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ChoiceType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "despatchDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "arrivalDate")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ChoiceType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ChoiceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.despatchDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("despatchDate"), __scope, false) } getOrElse {Nil},
        __obj.arrivalDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("arrivalDate"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCalculateCostAndEstimatedTimeRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CalculateCostAndEstimatedTimeRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CalculateCostAndEstimatedTimeRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "senderLocation")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "receiverLocation")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "serviceCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "noOfItems")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "weight")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "volume")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "includeTransitWarranty")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "transitWarrantyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "includeRiskWarranty")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "riskWarrantyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "includeFuelSurcharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "includeSecuritySurcharge")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "choice")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      org.birchavenue.startrack.CalculateCostAndEstimatedTimeRequest(scalaxb.fromXML[org.birchavenue.startrack.TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ExtLocationDetailsType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ExtLocationDetailsType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.ChoiceType](p14, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CalculateCostAndEstimatedTimeRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ExtLocationDetailsType](__obj.senderLocation, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("senderLocation"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ExtLocationDetailsType](__obj.receiverLocation, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("receiverLocation"), __scope, false),
        scalaxb.toXML[String](__obj.serviceCode, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("serviceCode"), __scope, false),
        scalaxb.toXML[BigInt](__obj.noOfItems, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("noOfItems"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.weight, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("weight"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.volume, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("volume"), __scope, false),
        __obj.includeTransitWarranty map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("includeTransitWarranty"), __scope, false) } getOrElse {Nil},
        __obj.transitWarrantyValue map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("transitWarrantyValue"), __scope, false) } getOrElse {Nil},
        __obj.includeRiskWarranty map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("includeRiskWarranty"), __scope, false) } getOrElse {Nil},
        __obj.riskWarrantyValue map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("riskWarrantyValue"), __scope, false) } getOrElse {Nil},
        __obj.includeFuelSurcharge map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("includeFuelSurcharge"), __scope, false) } getOrElse {Nil},
        __obj.includeSecuritySurcharge map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("includeSecuritySurcharge"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.startrack.ChoiceType](__obj.choice, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("choice"), __scope, false))

  }

  trait DefaultStartrackCalculateCostAndEstimatedTimeResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CalculateCostAndEstimatedTimeResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CalculateCostAndEstimatedTimeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "cost")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "gstCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "fuelSurcharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "securitySurcharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "transitWarrantyCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "transitWarrantyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "riskWarrantyCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "riskWarrantyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "eta")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "etd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      org.birchavenue.startrack.CalculateCostAndEstimatedTimeResponse(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CalculateCostAndEstimatedTimeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.cost map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("cost"), __scope, false) } getOrElse {Nil},
        __obj.gstCharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("gstCharge"), __scope, false) } getOrElse {Nil},
        __obj.fuelSurcharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("fuelSurcharge"), __scope, false) } getOrElse {Nil},
        __obj.securitySurcharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("securitySurcharge"), __scope, false) } getOrElse {Nil},
        __obj.transitWarrantyCharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("transitWarrantyCharge"), __scope, false) } getOrElse {Nil},
        __obj.transitWarrantyValue map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("transitWarrantyValue"), __scope, false) } getOrElse {Nil},
        __obj.riskWarrantyCharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("riskWarrantyCharge"), __scope, false) } getOrElse {Nil},
        __obj.riskWarrantyValue map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("riskWarrantyValue"), __scope, false) } getOrElse {Nil},
        __obj.eta map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("eta"), __scope, false) } getOrElse {Nil},
        __obj.etd map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("etd"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCalculateCostRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CalculateCostRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CalculateCostRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "senderLocation")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "receiverLocation")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "serviceCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "noOfItems")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "weight")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "volume")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "includeTransitWarranty")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "transitWarrantyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "includeRiskWarranty")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "riskWarrantyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "includeFuelSurcharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "includeSecuritySurcharge")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      org.birchavenue.startrack.CalculateCostRequest(scalaxb.fromXML[org.birchavenue.startrack.TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ExtLocationDetailsType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ExtLocationDetailsType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CalculateCostRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ExtLocationDetailsType](__obj.senderLocation, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("senderLocation"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ExtLocationDetailsType](__obj.receiverLocation, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("receiverLocation"), __scope, false),
        scalaxb.toXML[String](__obj.serviceCode, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("serviceCode"), __scope, false),
        scalaxb.toXML[BigInt](__obj.noOfItems, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("noOfItems"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.weight, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("weight"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.volume, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("volume"), __scope, false),
        __obj.includeTransitWarranty map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("includeTransitWarranty"), __scope, false) } getOrElse {Nil},
        __obj.transitWarrantyValue map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("transitWarrantyValue"), __scope, false) } getOrElse {Nil},
        __obj.includeRiskWarranty map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("includeRiskWarranty"), __scope, false) } getOrElse {Nil},
        __obj.riskWarrantyValue map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("riskWarrantyValue"), __scope, false) } getOrElse {Nil},
        __obj.includeFuelSurcharge map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("includeFuelSurcharge"), __scope, false) } getOrElse {Nil},
        __obj.includeSecuritySurcharge map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("includeSecuritySurcharge"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCalculateCostResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CalculateCostResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CalculateCostResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "cost")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "gstCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "fuelSurcharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "securitySurcharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "transitWarrantyCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "transitWarrantyValue")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "riskWarrantyCharge")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "riskWarrantyValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      org.birchavenue.startrack.CalculateCostResponse(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CalculateCostResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.cost map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("cost"), __scope, false) } getOrElse {Nil},
        __obj.gstCharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("gstCharge"), __scope, false) } getOrElse {Nil},
        __obj.fuelSurcharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("fuelSurcharge"), __scope, false) } getOrElse {Nil},
        __obj.securitySurcharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("securitySurcharge"), __scope, false) } getOrElse {Nil},
        __obj.transitWarrantyCharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("transitWarrantyCharge"), __scope, false) } getOrElse {Nil},
        __obj.transitWarrantyValue map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("transitWarrantyValue"), __scope, false) } getOrElse {Nil},
        __obj.riskWarrantyCharge map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("riskWarrantyCharge"), __scope, false) } getOrElse {Nil},
        __obj.riskWarrantyValue map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("riskWarrantyValue"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCalculateEstimatedTimeRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CalculateEstimatedTimeRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CalculateEstimatedTimeRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "senderLocation")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "receiverLocation")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "serviceCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "choice")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "validateAddress")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.startrack.CalculateEstimatedTimeRequest(scalaxb.fromXML[org.birchavenue.startrack.TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ExtLocationDetailsType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ExtLocationDetailsType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ChoiceType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CalculateEstimatedTimeRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ExtLocationDetailsType](__obj.senderLocation, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("senderLocation"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ExtLocationDetailsType](__obj.receiverLocation, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("receiverLocation"), __scope, false),
        scalaxb.toXML[String](__obj.serviceCode, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("serviceCode"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ChoiceType](__obj.choice, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("choice"), __scope, false),
        __obj.validateAddress map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("validateAddress"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCalculateEstimatedTimeResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CalculateEstimatedTimeResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CalculateEstimatedTimeResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "eta")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "etd")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.CalculateEstimatedTimeResponse(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CalculateEstimatedTimeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.eta map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("eta"), __scope, false) } getOrElse {Nil},
        __obj.etd map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("etd"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackTp_calculateEstimatedTimeRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_calculateEstimatedTimeRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_calculateEstimatedTimeRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "senderLocation")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "receiverLocation")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "serviceCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "choice")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "validateAddress")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.startrack.Tp_calculateEstimatedTimeRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ExtLocationDetailsType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ExtLocationDetailsType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.ChoiceType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_calculateEstimatedTimeRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ExtLocationDetailsType](__obj.senderLocation, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("senderLocation"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ExtLocationDetailsType](__obj.receiverLocation, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("receiverLocation"), __scope, false),
        scalaxb.toXML[String](__obj.serviceCode, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("serviceCode"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.ChoiceType](__obj.choice, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("choice"), __scope, false),
        __obj.validateAddress map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), Some("validateAddress"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDepotTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.DepotTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.DepotTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("depotType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.DepotTypeType2](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.DepotTypeType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.DepotTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.DepotTypeType2 => scalaxb.toXML[org.birchavenue.startrack.DepotTypeType2](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.DepotTypeType => scalaxb.toXML[org.birchavenue.startrack.DepotTypeType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackDepotTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DepotTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/MasterData/v1")
    
    override def typeName: Option[String] = Some("DepotType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DepotTypeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "depotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "depotName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "depotAbbreviation")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "adminDepotCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.DepotTypeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DepotTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.depotCode, Some("http://startrackexpress/Common/MasterData/v1"), Some("depotCode"), __scope, false),
        __obj.depotName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("depotName"), __scope, false) } getOrElse {Nil},
        __obj.depotAbbreviation map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("depotAbbreviation"), __scope, false) } getOrElse {Nil},
        __obj.adminDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("adminDepotCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackFreightItemIncidentTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.FreightItemIncidentType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/MasterData/v1")
    
    override def typeName: Option[String] = Some("FreightItemIncidentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.FreightItemIncidentType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "freightItemIncidentCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "freightItemIncidentDescription")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.FreightItemIncidentType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.FreightItemIncidentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.freightItemIncidentCode, Some("http://startrackexpress/Common/MasterData/v1"), Some("freightItemIncidentCode"), __scope, false),
        __obj.freightItemIncidentDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("freightItemIncidentDescription"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackLocationTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.LocationTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.LocationTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("locationType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.LocationTypeType](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.LocationType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.LocationTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.LocationTypeType => scalaxb.toXML[org.birchavenue.startrack.LocationTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.LocationType => scalaxb.toXML[org.birchavenue.startrack.LocationType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackLocationTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.LocationType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/MasterData/v1")
    
    override def typeName: Option[String] = Some("LocationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.LocationType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "locationId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "locationDetails")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "nearestDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "primaryAirDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "secondaryAirDepotCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.startrack.LocationType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.LocationDetailsType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.LocationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.locationId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("locationId"), __scope, false) } getOrElse {Nil},
        __obj.locationDetails map { scalaxb.toXML[org.birchavenue.startrack.LocationDetailsType](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("locationDetails"), __scope, false) } getOrElse {Nil},
        __obj.nearestDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("nearestDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.primaryAirDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("primaryAirDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.secondaryAirDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("secondaryAirDepotCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackQCCodeTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.QCCodeTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.QCCodeTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("qCCodeType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.QCCodeTypeType](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.QCCodeType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.QCCodeTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.QCCodeTypeType => scalaxb.toXML[org.birchavenue.startrack.QCCodeTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.QCCodeType => scalaxb.toXML[org.birchavenue.startrack.QCCodeType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackQCCodeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.QCCodeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/MasterData/v1")
    
    override def typeName: Option[String] = Some("QCCodeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.QCCodeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "qcCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "qcDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "isSelectable")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.QCCodeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.QCCodeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.qcCode, Some("http://startrackexpress/Common/MasterData/v1"), Some("qcCode"), __scope, false),
        __obj.qcDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("qcDescription"), __scope, false) } getOrElse {Nil},
        __obj.isSelectable map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("isSelectable"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackScanModeTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ScanModeTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ScanModeTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("scanModeType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.ScanModeTypeType](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.ScanModeType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.ScanModeTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.ScanModeTypeType => scalaxb.toXML[org.birchavenue.startrack.ScanModeTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.ScanModeType => scalaxb.toXML[org.birchavenue.startrack.ScanModeType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackScanModeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ScanModeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/MasterData/v1")
    
    override def typeName: Option[String] = Some("ScanModeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ScanModeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "scanMode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "scanDescription")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ScanModeType(scalaxb.fromXML[org.birchavenue.startrack.ScanModeHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ScanModeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.ScanModeHeaderType](__obj.scanMode, Some("http://startrackexpress/Common/MasterData/v1"), Some("scanMode"), __scope, false),
        __obj.scanDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("scanDescription"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackTransitStateTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.TransitStateTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.TransitStateTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("transitStateType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.TransitStateTypeType](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.TransitStateType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.TransitStateTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.TransitStateTypeType => scalaxb.toXML[org.birchavenue.startrack.TransitStateTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.TransitStateType => scalaxb.toXML[org.birchavenue.startrack.TransitStateType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackTransitStateTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.TransitStateType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/MasterData/v1")
    
    override def typeName: Option[String] = Some("TransitStateType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.TransitStateType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "transitStateHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "transitStateDescription")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.TransitStateType(scalaxb.fromXML[org.birchavenue.startrack.TransitStateHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.TransitStateType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransitStateHeaderType](__obj.transitStateHeader, Some("http://startrackexpress/Common/MasterData/v1"), Some("transitStateHeader"), __scope, false),
        __obj.transitStateDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("transitStateDescription"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackUnitTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.UnitTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/MasterData/v1")
    
    override def typeName: Option[String] = Some("unitTypeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.UnitTypeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "unitType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "unitDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "unitRank")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "publiclyViewable")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "isDefault")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "sortOrder")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "isBulk")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.UnitTypeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.UnitTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.unitType, Some("http://startrackexpress/Common/MasterData/v1"), Some("unitType"), __scope, false),
        __obj.unitDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("unitDescription"), __scope, false) } getOrElse {Nil},
        __obj.unitRank map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("unitRank"), __scope, false) } getOrElse {Nil},
        __obj.publiclyViewable map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("publiclyViewable"), __scope, false) } getOrElse {Nil},
        __obj.isDefault map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("isDefault"), __scope, false) } getOrElse {Nil},
        __obj.sortOrder map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("sortOrder"), __scope, false) } getOrElse {Nil},
        __obj.isBulk map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("isBulk"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDepotTypeType2Format extends scalaxb.ElemNameParser[org.birchavenue.startrack.DepotTypeType2] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    override def typeName: Option[String] = Some("depotType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DepotTypeType2] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "depotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "depotName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "depotAbbreviation")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "adminDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.startrack.DepotTypeType2(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DepotTypeType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.depotCode, Some("http://startrackexpress/Common/MasterData/v1"), Some("depotCode"), __scope, false),
        __obj.depotName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("depotName"), __scope, false) } getOrElse {Nil},
        __obj.depotAbbreviation map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("depotAbbreviation"), __scope, false) } getOrElse {Nil},
        __obj.adminDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("adminDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetDepotCutOffTimeComplexFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetDepotCutOffTimeComplex] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    override def typeName: Option[String] = Some("getDepotCutOffTimeComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetDepotCutOffTimeComplex] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "depotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "depotName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "airBookingCutOff")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "roadBookingCutOff")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "airPickupCutOff")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "roadPickupCutOff")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "adminDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lock_seq")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      org.birchavenue.startrack.GetDepotCutOffTimeComplex(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetDepotCutOffTimeComplex, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.depotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("depotCode"), __scope, false) } getOrElse {Nil},
        __obj.depotName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("depotName"), __scope, false) } getOrElse {Nil},
        __obj.airBookingCutOff map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("airBookingCutOff"), __scope, false) } getOrElse {Nil},
        __obj.roadBookingCutOff map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("roadBookingCutOff"), __scope, false) } getOrElse {Nil},
        __obj.airPickupCutOff map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("airPickupCutOff"), __scope, false) } getOrElse {Nil},
        __obj.roadPickupCutOff map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("roadPickupCutOff"), __scope, false) } getOrElse {Nil},
        __obj.adminDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("adminDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lock_seq"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackLocationTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.LocationTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    override def typeName: Option[String] = Some("locationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.LocationTypeType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "locationId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "locationDetails")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "nearestDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "primaryAirDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "secondaryAirDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "visualSuburb")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.LocationTypeType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.LocationDetailsType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.LocationTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.locationId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("locationId"), __scope, false) } getOrElse {Nil},
        __obj.locationDetails map { scalaxb.toXML[org.birchavenue.startrack.LocationDetailsType](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("locationDetails"), __scope, false) } getOrElse {Nil},
        __obj.nearestDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("nearestDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.primaryAirDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("primaryAirDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.secondaryAirDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("secondaryAirDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil},
        __obj.visualSuburb map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("visualSuburb"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackQCCodeTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.QCCodeTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    override def typeName: Option[String] = Some("qCCodeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.QCCodeTypeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "qcCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "qcDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "isSelectable")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.QCCodeTypeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.QCCodeTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.qcCode, Some("http://startrackexpress/Common/MasterData/v1"), Some("qcCode"), __scope, false),
        __obj.qcDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("qcDescription"), __scope, false) } getOrElse {Nil},
        __obj.isSelectable map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("isSelectable"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackScanModeTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ScanModeTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    override def typeName: Option[String] = Some("scanModeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ScanModeTypeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "scanMode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "scanDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.ScanModeTypeType(scalaxb.fromXML[org.birchavenue.startrack.ScanModeHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ScanModeTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.ScanModeHeaderType](__obj.scanMode, Some("http://startrackexpress/Common/MasterData/v1"), Some("scanMode"), __scope, false),
        __obj.scanDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("scanDescription"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackServiceCodeComplexTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ServiceCodeComplexType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    override def typeName: Option[String] = Some("serviceCodeComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ServiceCodeComplexType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceClass")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "serviceRank")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "publiclyViewable")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "isDefault")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "sortOrder")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "transportType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "tLabelText")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "fastServiceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "newProduct")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Primitives/v1"), "applicability")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lock_seq")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      org.birchavenue.startrack.ServiceCodeComplexType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ServiceCodeComplexType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil},
        __obj.serviceDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceDescription"), __scope, false) } getOrElse {Nil},
        __obj.serviceClass map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceClass"), __scope, false) } getOrElse {Nil},
        __obj.serviceType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceType"), __scope, false) } getOrElse {Nil},
        __obj.serviceRank map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("serviceRank"), __scope, false) } getOrElse {Nil},
        __obj.publiclyViewable map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("publiclyViewable"), __scope, false) } getOrElse {Nil},
        __obj.isDefault map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("isDefault"), __scope, false) } getOrElse {Nil},
        __obj.sortOrder map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("sortOrder"), __scope, false) } getOrElse {Nil},
        __obj.transportType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("transportType"), __scope, false) } getOrElse {Nil},
        __obj.tLabelText map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("tLabelText"), __scope, false) } getOrElse {Nil},
        __obj.fastServiceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("fastServiceCode"), __scope, false) } getOrElse {Nil},
        __obj.newProduct map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("newProduct"), __scope, false) } getOrElse {Nil},
        __obj.applicability map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Primitives/v1"), Some("applicability"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil},
        __obj.lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lock_seq"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackSimpleLocationTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.SimpleLocationType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.SimpleLocationType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.SimpleLocationType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.SimpleLocationType((node \ "@lastUpdated").headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@nearestDepotCode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@postCode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@state").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@suburb").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@visualSuburb").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.SimpleLocationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.lastUpdated foreach { x => attr = scala.xml.Attribute(null, "lastUpdated", x.toString, attr) }
      __obj.nearestDepotCode foreach { x => attr = scala.xml.Attribute(null, "nearestDepotCode", x.toString, attr) }
      __obj.postCode foreach { x => attr = scala.xml.Attribute(null, "postCode", x.toString, attr) }
      __obj.state foreach { x => attr = scala.xml.Attribute(null, "state", x.toString, attr) }
      __obj.suburb foreach { x => attr = scala.xml.Attribute(null, "suburb", x.toString, attr) }
      __obj.visualSuburb foreach { x => attr = scala.xml.Attribute(null, "visualSuburb", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.SimpleLocationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackTransitStateTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.TransitStateTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    override def typeName: Option[String] = Some("transitStateType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.TransitStateTypeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "transitStateHeader")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/MasterData/v1"), "transitStateDescription")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.TransitStateTypeType(scalaxb.fromXML[org.birchavenue.startrack.TransitStateHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.TransitStateTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransitStateHeaderType](__obj.transitStateHeader, Some("http://startrackexpress/Common/MasterData/v1"), Some("transitStateHeader"), __scope, false),
        __obj.transitStateDescription map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/MasterData/v1"), Some("transitStateDescription"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetDepotsRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetDepotsRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetDepotsRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "header")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "depotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.GetDepotsRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetDepotsRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("header"), __scope, false),
        __obj.depotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("depotCode"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetDepotsResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetDepotsResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetDepotsResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "depot")) ^^
      { case p1 =>
      org.birchavenue.startrack.GetDepotsResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.GetDepotCutOffTimeComplex](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetDepotsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.depot flatMap { scalaxb.toXML[org.birchavenue.startrack.GetDepotCutOffTimeComplex](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("depot"), __scope, false) })

  }

  trait DefaultStartrackGetLocationsRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetLocationsRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetLocationsRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "locationDetails")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.GetLocationsRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.LocationDetailsType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetLocationsRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.LocationDetailsType](__obj.locationDetails, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("locationDetails"), __scope, false),
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetLocationsResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetLocationsResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetLocationsResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "location")) ^^
      { case p1 =>
      org.birchavenue.startrack.GetLocationsResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.SimpleLocationType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetLocationsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.location flatMap { scalaxb.toXML[org.birchavenue.startrack.SimpleLocationType](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("location"), __scope, false) })

  }

  trait DefaultStartrackGetNearestDepotRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetNearestDepotRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetNearestDepotRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "locationDetails")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.GetNearestDepotRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.LocationDetailsType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetNearestDepotRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.LocationDetailsType](__obj.locationDetails, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("locationDetails"), __scope, false),
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetNearestDepotResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetNearestDepotResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetNearestDepotResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "depot")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "locations")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.GetNearestDepotResponse(p1.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DepotTypeType2](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.LocationTypeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetNearestDepotResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.depot map { scalaxb.toXML[org.birchavenue.startrack.DepotTypeType2](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("depot"), __scope, false) } getOrElse {Nil},
        __obj.locations flatMap { scalaxb.toXML[org.birchavenue.startrack.LocationTypeType](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("locations"), __scope, false) })

  }

  trait DefaultStartrackGetQCCodesRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetQCCodesRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetQCCodesRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "header")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "code")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.GetQCCodesRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetQCCodesRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("header"), __scope, false),
        __obj.code map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetQCCodesResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetQCCodesResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetQCCodesResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "qcCodes")) ^^
      { case p1 =>
      org.birchavenue.startrack.GetQCCodesResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.QCCodeTypeType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetQCCodesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.qcCodes flatMap { scalaxb.toXML[org.birchavenue.startrack.QCCodeTypeType](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("qcCodes"), __scope, false) })

  }

  trait DefaultStartrackGetServiceCodesRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetServiceCodesRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetServiceCodesRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "header")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "code")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "lastUpdated")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.GetServiceCodesRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetServiceCodesRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("header"), __scope, false),
        __obj.code map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.lastUpdated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("lastUpdated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetServiceCodesResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetServiceCodesResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetServiceCodesResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "codes")) ^^
      { case p1 =>
      org.birchavenue.startrack.GetServiceCodesResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ServiceCodeComplexType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetServiceCodesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.codes flatMap { scalaxb.toXML[org.birchavenue.startrack.ServiceCodeComplexType](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("codes"), __scope, false) })

  }

  trait DefaultStartrackValidateAddressRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ValidateAddressRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ValidateAddressRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "header")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "address")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ValidateAddressRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ValidateAddressRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("header"), __scope, false),
        __obj.address map { scalaxb.toXML[org.birchavenue.startrack.AddressComplex](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackValidateAddressResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ValidateAddressResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/MasterData/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ValidateAddressResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "exactMatchFound")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "matchedAddress")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ValidateAddressResponse(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.MatchedAddressComplex](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ValidateAddressResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.exactMatchFound map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("exactMatchFound"), __scope, false) } getOrElse {Nil},
        __obj.matchedAddress flatMap { scalaxb.toXML[org.birchavenue.startrack.MatchedAddressComplex](_, Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), Some("matchedAddress"), __scope, false) })

  }

  trait DefaultStartrackBookedPickupTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.BookedPickupType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Booking/v1")
    
    override def typeName: Option[String] = Some("bookedPickupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.BookedPickupType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "bookingId")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "createdDateTime")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupDate")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.BookedPickupType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.BookedPickupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.bookingId, Some("http://startrackexpress/Common/Booking/v1"), Some("bookingId"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.createdDateTime, Some("http://startrackexpress/Common/Booking/v1"), Some("createdDateTime"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.pickupDate, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupDate"), __scope, false))

  }

  trait DefaultStartrackCustomerAuthorisationFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CustomerAuthorisation] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Booking/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CustomerAuthorisation] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "authorisationType")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "mustValidate")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "isRequired")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "allowedValue")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.CustomerAuthorisation(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CustomerAuthorisation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.authorisationType, Some("http://startrackexpress/Common/Booking/v1"), Some("authorisationType"), __scope, false),
        scalaxb.toXML[Boolean](__obj.mustValidate, Some("http://startrackexpress/Common/Booking/v1"), Some("mustValidate"), __scope, false),
        scalaxb.toXML[Boolean](__obj.isRequired, Some("http://startrackexpress/Common/Booking/v1"), Some("isRequired"), __scope, false),
        __obj.allowedValue flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("allowedValue"), __scope, false) })

  }

  trait DefaultStartrackPickupAccountTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupAccountType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Booking/v1")
    
    override def typeName: Option[String] = Some("pickupAccountType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupAccountType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "accountNumber")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "businessUnit")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "accountName")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "status")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pinRequired")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "costCentreRequired")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "employeeIDRequired")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "purchaseOrderRequired")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "customerReferenceRequired")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "stopTrade")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "customerAuthorisation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      org.birchavenue.startrack.PickupAccountType(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p10, scalaxb.ElemName(node) :: stack),
        p11.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.CustomerAuthorisation](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupAccountType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.accountNumber, Some("http://startrackexpress/Common/Booking/v1"), Some("accountNumber"), __scope, false),
        scalaxb.toXML[String](__obj.businessUnit, Some("http://startrackexpress/Common/Booking/v1"), Some("businessUnit"), __scope, false),
        __obj.accountName flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("accountName"), __scope, false) },
        scalaxb.toXML[String](__obj.status, Some("http://startrackexpress/Common/Booking/v1"), Some("status"), __scope, false),
        scalaxb.toXML[Boolean](__obj.pinRequired, Some("http://startrackexpress/Common/Booking/v1"), Some("pinRequired"), __scope, false),
        scalaxb.toXML[Boolean](__obj.costCentreRequired, Some("http://startrackexpress/Common/Booking/v1"), Some("costCentreRequired"), __scope, false),
        scalaxb.toXML[Boolean](__obj.employeeIDRequired, Some("http://startrackexpress/Common/Booking/v1"), Some("employeeIDRequired"), __scope, false),
        scalaxb.toXML[Boolean](__obj.purchaseOrderRequired, Some("http://startrackexpress/Common/Booking/v1"), Some("purchaseOrderRequired"), __scope, false),
        scalaxb.toXML[Boolean](__obj.customerReferenceRequired, Some("http://startrackexpress/Common/Booking/v1"), Some("customerReferenceRequired"), __scope, false),
        scalaxb.toXML[Boolean](__obj.stopTrade, Some("http://startrackexpress/Common/Booking/v1"), Some("stopTrade"), __scope, false),
        __obj.customerAuthorisation flatMap { scalaxb.toXML[org.birchavenue.startrack.CustomerAuthorisation](_, Some("http://startrackexpress/Common/Booking/v1"), Some("customerAuthorisation"), __scope, false) })

  }

  trait DefaultStartrackPickupBookingTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupBookingTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Booking/v1")
    
    override def typeName: Option[String] = Some("pickupBookingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupBookingTypeType] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "serviceCode")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "payerAccountNo")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "bookingSource")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "consignmentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "isPrePaid")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupDetails")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "deliveryDetails")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "specialInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "timeReady")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "timeClosing")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "connoteRequired")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "isPrivateAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "branchPrintLabels")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "costCentre")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "employeeID")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "purchaseOrder")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupFreightItems")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "heaviestItemWeight")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      org.birchavenue.startrack.PickupBookingTypeType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.PickupLocationDetailsType](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[org.birchavenue.startrack.PickupLocationDetailsType](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.PickupFreightItemGroupTypeType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupBookingTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.serviceCode, Some("http://startrackexpress/Common/Booking/v1"), Some("serviceCode"), __scope, false),
        scalaxb.toXML[String](__obj.payerAccountNo, Some("http://startrackexpress/Common/Booking/v1"), Some("payerAccountNo"), __scope, false),
        scalaxb.toXML[String](__obj.bookingSource, Some("http://startrackexpress/Common/Booking/v1"), Some("bookingSource"), __scope, false),
        __obj.consignmentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("consignmentId"), __scope, false) } getOrElse {Nil},
        __obj.isPrePaid map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Booking/v1"), Some("isPrePaid"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.startrack.PickupLocationDetailsType](__obj.pickupDetails, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupDetails"), __scope, false),
        __obj.deliveryDetails map { scalaxb.toXML[org.birchavenue.startrack.PickupLocationDetailsType](_, Some("http://startrackexpress/Common/Booking/v1"), Some("deliveryDetails"), __scope, false) } getOrElse {Nil},
        __obj.specialInstructions flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("specialInstructions"), __scope, false) },
        __obj.pickupDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupDate"), __scope, false) } getOrElse {Nil},
        __obj.timeReady map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Booking/v1"), Some("timeReady"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.timeClosing, Some("http://startrackexpress/Common/Booking/v1"), Some("timeClosing"), __scope, false),
        __obj.connoteRequired map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Booking/v1"), Some("connoteRequired"), __scope, false) } getOrElse {Nil},
        __obj.isPrivateAddress map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Booking/v1"), Some("isPrivateAddress"), __scope, false) } getOrElse {Nil},
        __obj.branchPrintLabels map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Booking/v1"), Some("branchPrintLabels"), __scope, false) } getOrElse {Nil},
        __obj.costCentre map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("costCentre"), __scope, false) } getOrElse {Nil},
        __obj.employeeID map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("employeeID"), __scope, false) } getOrElse {Nil},
        __obj.purchaseOrder map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("purchaseOrder"), __scope, false) } getOrElse {Nil},
        __obj.pickupFreightItems flatMap { scalaxb.toXML[org.birchavenue.startrack.PickupFreightItemGroupTypeType](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupFreightItems"), __scope, false) },
        __obj.heaviestItemWeight map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/Booking/v1"), Some("heaviestItemWeight"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPickupCutoffTimeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupCutoffTime] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Booking/v1")
    
    override def typeName: Option[String] = Some("pickupCutoffTime")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupCutoffTime] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "payerAccountNo")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "serviceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupDate")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupLocation")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.PickupCutoffTime(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupCutoffTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.payerAccountNo map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("payerAccountNo"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.serviceCode, Some("http://startrackexpress/Common/Booking/v1"), Some("serviceCode"), __scope, false),
        __obj.pickupDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.startrack.AddressComplex](__obj.pickupLocation, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupLocation"), __scope, false))

  }

  trait DefaultStartrackPickupFreightItemGroupTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupFreightItemGroupTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Booking/v1")
    
    override def typeName: Option[String] = Some("pickupFreightItemGroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupFreightItemGroupTypeType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "quantity")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "weight")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "height")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "width")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "length")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "unitType")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.startrack.PickupFreightItemGroupTypeType(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupFreightItemGroupTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.quantity map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Booking/v1"), Some("quantity"), __scope, false) } getOrElse {Nil},
        __obj.weight map { scalaxb.toXML[BigDecimal](_, Some("http://startrackexpress/Common/Booking/v1"), Some("weight"), __scope, false) } getOrElse {Nil},
        __obj.height map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Booking/v1"), Some("height"), __scope, false) } getOrElse {Nil},
        __obj.width map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Booking/v1"), Some("width"), __scope, false) } getOrElse {Nil},
        __obj.length map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Booking/v1"), Some("length"), __scope, false) } getOrElse {Nil},
        __obj.unitType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("unitType"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPickupLocationComplexTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupLocationComplexType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Booking/v1")
    
    override def typeName: Option[String] = Some("pickupLocationComplex")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupLocationComplexType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "index")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "accountNumber")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "businessUnit")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupCompanyName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupContact")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupPhoneNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupEmailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupPoint")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "closingTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "airCutoffTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "roadCutoffTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "nearestDepotCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "auspostLodgement")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "regularPickup")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "pickupIdentificationRequired")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "locationTimezone")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "currentTimeAtLocation")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "timePassed")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "nextBusinessDay")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      org.birchavenue.startrack.PickupLocationComplexType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupLocationComplexType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.index map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("index"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigInt](__obj.accountNumber, Some("http://startrackexpress/Common/Booking/v1"), Some("accountNumber"), __scope, false),
        scalaxb.toXML[String](__obj.businessUnit, Some("http://startrackexpress/Common/Booking/v1"), Some("businessUnit"), __scope, false),
        __obj.pickupCompanyName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupCompanyName"), __scope, false) } getOrElse {Nil},
        __obj.pickupContact map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupContact"), __scope, false) } getOrElse {Nil},
        __obj.pickupAddress map { scalaxb.toXML[org.birchavenue.startrack.AddressComplex](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupAddress"), __scope, false) } getOrElse {Nil},
        __obj.pickupPhoneNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupPhoneNumber"), __scope, false) } getOrElse {Nil},
        __obj.pickupEmailAddress map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupEmailAddress"), __scope, false) } getOrElse {Nil},
        __obj.pickupPoint map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupPoint"), __scope, false) } getOrElse {Nil},
        __obj.closingTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Booking/v1"), Some("closingTime"), __scope, false) } getOrElse {Nil},
        __obj.airCutoffTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Booking/v1"), Some("airCutoffTime"), __scope, false) } getOrElse {Nil},
        __obj.roadCutoffTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Booking/v1"), Some("roadCutoffTime"), __scope, false) } getOrElse {Nil},
        __obj.nearestDepotCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("nearestDepotCode"), __scope, false) } getOrElse {Nil},
        __obj.auspostLodgement map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Booking/v1"), Some("auspostLodgement"), __scope, false) } getOrElse {Nil},
        __obj.regularPickup map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Booking/v1"), Some("regularPickup"), __scope, false) } getOrElse {Nil},
        __obj.pickupIdentificationRequired map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("pickupIdentificationRequired"), __scope, false) } getOrElse {Nil},
        __obj.locationTimezone map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("locationTimezone"), __scope, false) } getOrElse {Nil},
        __obj.currentTimeAtLocation map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Booking/v1"), Some("currentTimeAtLocation"), __scope, false) } getOrElse {Nil},
        __obj.timePassed map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Booking/v1"), Some("timePassed"), __scope, false) } getOrElse {Nil},
        __obj.nextBusinessDay map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Booking/v1"), Some("nextBusinessDay"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPickupLocationDetailsTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PickupLocationDetailsType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Booking/v1")
    
    override def typeName: Option[String] = Some("pickupLocationDetailsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PickupLocationDetailsType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "companyName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "contactName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "contactPhone")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "contactMobilePhone")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "contactEmailAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "contactPoint")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Booking/v1"), "locationDetails")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.PickupLocationDetailsType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PickupLocationDetailsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.companyName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("companyName"), __scope, false) } getOrElse {Nil},
        __obj.contactName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("contactName"), __scope, false) } getOrElse {Nil},
        __obj.contactPhone map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("contactPhone"), __scope, false) } getOrElse {Nil},
        __obj.contactMobilePhone map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("contactMobilePhone"), __scope, false) } getOrElse {Nil},
        __obj.contactEmailAddress map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("contactEmailAddress"), __scope, false) } getOrElse {Nil},
        __obj.contactPoint map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Booking/v1"), Some("contactPoint"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.startrack.AddressComplex](__obj.locationDetails, Some("http://startrackexpress/Common/Booking/v1"), Some("locationDetails"), __scope, false))

  }

  trait DefaultStartrackChoiceTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ChoiceTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("choiceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ChoiceTypeType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentId")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "senderReferenceNumber")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ChoiceTypeType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ChoiceTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.consignmentId flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentId"), __scope, false) },
        __obj.senderReferenceNumber flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("senderReferenceNumber"), __scope, false) })

  }

  trait DefaultStartrackConsignmentStatusesTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ConsignmentStatusesType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("consignmentStatusesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ConsignmentStatusesType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "status")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "total")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ConsignmentStatusesType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ConsignmentStatusesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.status map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.total map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("total"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackConsignmentTypesTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ConsignmentTypesType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("consignmentTypesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ConsignmentTypesType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "type")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "total")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ConsignmentTypesType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ConsignmentTypesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.typeValue map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.total map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("total"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDespatchChoiceTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DespatchChoiceType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("despatchChoiceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DespatchChoiceType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "serviceType")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchLocationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "status")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.DespatchChoiceType(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ServiceTypeEnum](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DespatchChoiceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.serviceType flatMap { scalaxb.toXML[org.birchavenue.startrack.ServiceTypeEnum](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("serviceType"), __scope, false) },
        scalaxb.toXML[String](__obj.despatchLocationCode, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchLocationCode"), __scope, false),
        __obj.despatchDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchDate"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("status"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetConsignmentDetailChoiceTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetConsignmentDetailChoiceType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("getConsignmentDetailChoiceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetConsignmentDetailChoiceType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatch")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "includeEvents")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.GetConsignmentDetailChoiceType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DespatchChoiceType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetConsignmentDetailChoiceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.consignmentId flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentId"), __scope, false) },
        __obj.despatch map { scalaxb.toXML[org.birchavenue.startrack.DespatchChoiceType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatch"), __scope, false) } getOrElse {Nil},
        __obj.includeEvents map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("includeEvents"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackMatchingConsignmentsTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.MatchingConsignmentsType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("matchingConsignmentsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.MatchingConsignmentsType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "payerAccountNumber")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchLocationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "total")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.MatchingConsignmentsType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.MatchingConsignmentsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.payerAccountNumber map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("payerAccountNumber"), __scope, false) } getOrElse {Nil},
        __obj.despatchLocationCode flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchLocationCode"), __scope, false) },
        __obj.total map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("total"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackPersonSearchTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.PersonSearchType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("personSearchType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.PersonSearchType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "suburb")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "state")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "postCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.PersonSearchType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.PersonSearchType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.suburb map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("suburb"), __scope, false) } getOrElse {Nil},
        __obj.state map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("state"), __scope, false) } getOrElse {Nil},
        __obj.postCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("postCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackSearchConsignmentRequestTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.SearchConsignmentRequestType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("searchConsignmentRequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.SearchConsignmentRequestType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentType")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchFromDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchToDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "etaFromDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "etaToDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "deliveryFromDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "deliveryToDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.startrack.SearchConsignmentRequestType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.SearchConsignmentRequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.consignmentType flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentType"), __scope, false) },
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.despatchFromDate, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchFromDate"), __scope, false),
        __obj.despatchToDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchToDate"), __scope, false) } getOrElse {Nil},
        __obj.etaFromDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("etaFromDate"), __scope, false) } getOrElse {Nil},
        __obj.etaToDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("etaToDate"), __scope, false) } getOrElse {Nil},
        __obj.deliveryFromDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("deliveryFromDate"), __scope, false) } getOrElse {Nil},
        __obj.deliveryToDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("deliveryToDate"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackSearchConsignmentTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.SearchConsignmentType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("searchConsignmentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.SearchConsignmentType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "source")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "status")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "type")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "serviceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "payerAccountNumber")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "etaDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "payerType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchLocationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "receiver")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "references")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "lastStatusDatetime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "podSignatoryName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "dangerousGoods")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "podSignature")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      org.birchavenue.startrack.SearchConsignmentType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ReceiverTypeType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ReferenceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.SearchConsignmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil},
        __obj.despatchDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchDate"), __scope, false) } getOrElse {Nil},
        __obj.payerAccountNumber map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("payerAccountNumber"), __scope, false) } getOrElse {Nil},
        __obj.etaDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("etaDate"), __scope, false) } getOrElse {Nil},
        __obj.payerType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("payerType"), __scope, false) } getOrElse {Nil},
        __obj.despatchLocationCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchLocationCode"), __scope, false) } getOrElse {Nil},
        __obj.receiver map { scalaxb.toXML[org.birchavenue.startrack.ReceiverTypeType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("receiver"), __scope, false) } getOrElse {Nil},
        __obj.references map { scalaxb.toXML[org.birchavenue.startrack.ReferenceTypeType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("references"), __scope, false) } getOrElse {Nil},
        __obj.lastStatusDatetime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("lastStatusDatetime"), __scope, false) } getOrElse {Nil},
        __obj.podSignatoryName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("podSignatoryName"), __scope, false) } getOrElse {Nil},
        __obj.dangerousGoods map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("dangerousGoods"), __scope, false) } getOrElse {Nil},
        __obj.podSignature map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("podSignature"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackTp_choiceTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_choiceType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("tp_choiceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_choiceType] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentId")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "senderReferenceNumber")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.Tp_choiceType(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_choiceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.consignmentId flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentId"), __scope, false) },
        __obj.senderReferenceNumber flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("senderReferenceNumber"), __scope, false) })

  }

  trait DefaultStartrackTp_consignmentTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_consignmentType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("tp_consignmentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_consignmentType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "serviceCode")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "secondaryQcCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "receiver")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "sender")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "specialInstructions")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchLocationCode")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "references")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "statusHistory")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "trackingEvents")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "lineItems")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "dangerousGoods")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      org.birchavenue.startrack.Tp_consignmentType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[org.birchavenue.startrack.Tp_partnerType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.startrack.Tp_partnerType](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ReferenceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.StatusHistoryType](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ConsignmentTrackingEventType](_, scalaxb.ElemName(node) :: stack) },
        p10.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.LineItemTypeType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[org.birchavenue.startrack.DGType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@billedInd").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@billedInd" -> _ },
        (node \ "@bookInNotAfter").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@bookInNotAfter" -> _ },
        (node \ "@bookInNotBefore").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@bookInNotBefore" -> _ },
        (node \ "@carrierCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@carrierCode" -> _ },
        (node \ "@consolidate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@consolidate" -> _ },
        (node \ "@consolidateSendersReference").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@consolidateSendersReference" -> _ },
        (node \ "@creationDateTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@creationDateTime" -> _ },
        (node \ "@deliveryDepot").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@deliveryDepot" -> _ },
        (node \ "@despatchDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchDate" -> _ },
        (node \ "@despatchDepot").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchDepot" -> _ },
        (node \ "@despatchNotification").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchNotification" -> _ },
        (node \ "@despatchSummaryId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@despatchSummaryId" -> _ },
        (node \ "@driverCube").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@driverCube" -> _ },
        (node \ "@etaDate").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@etaDate" -> _ },
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@labelText").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText" -> _ },
        (node \ "@labelText_2").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText_2" -> _ },
        (node \ "@labelText_3").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@labelText_3" -> _ },
        (node \ "@lastStatusDateTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@lastStatusDateTime" -> _ },
        (node \ "@lock_seq").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@lock_seq" -> _ },
        (node \ "@payerType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@payerType" -> _ },
        (node \ "@podSignatoryName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@podSignatoryName" -> _ },
        (node \ "@podSignature").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@podSignature" -> _ },
        (node \ "@publishedQcCode").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@publishedQcCode" -> _ },
        (node \ "@quotationNumber").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@quotationNumber" -> _ },
        (node \ "@requestService").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@requestService" -> _ },
        (node \ "@source").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@source" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@status" -> _ },
        (node \ "@totalQuantity").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@totalQuantity" -> _ },
        (node \ "@totalVolume").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@totalVolume" -> _ },
        (node \ "@totalWeight").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Double](x, scalaxb.ElemName(node) :: stack)) } map { "@totalWeight" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@unitType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@unitType" -> _ },
        (node \ "@userName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@userName" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.Tp_consignmentType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@billedInd", _) => __obj.billedInd foreach { x => attr = scala.xml.Attribute(null, "billedInd", x.toString, attr) }
        case ("@bookInNotAfter", _) => __obj.bookInNotAfter foreach { x => attr = scala.xml.Attribute(null, "bookInNotAfter", x.toString, attr) }
        case ("@bookInNotBefore", _) => __obj.bookInNotBefore foreach { x => attr = scala.xml.Attribute(null, "bookInNotBefore", x.toString, attr) }
        case ("@carrierCode", _) => __obj.carrierCode foreach { x => attr = scala.xml.Attribute(null, "carrierCode", x.toString, attr) }
        case ("@consolidate", _) => __obj.consolidate foreach { x => attr = scala.xml.Attribute(null, "consolidate", x.toString, attr) }
        case ("@consolidateSendersReference", _) => __obj.consolidateSendersReference foreach { x => attr = scala.xml.Attribute(null, "consolidateSendersReference", x.toString, attr) }
        case ("@creationDateTime", _) => __obj.creationDateTime foreach { x => attr = scala.xml.Attribute(null, "creationDateTime", x.toString, attr) }
        case ("@deliveryDepot", _) => __obj.deliveryDepot foreach { x => attr = scala.xml.Attribute(null, "deliveryDepot", x.toString, attr) }
        case ("@despatchDate", _) => __obj.despatchDate foreach { x => attr = scala.xml.Attribute(null, "despatchDate", x.toString, attr) }
        case ("@despatchDepot", _) => __obj.despatchDepot foreach { x => attr = scala.xml.Attribute(null, "despatchDepot", x.toString, attr) }
        case ("@despatchNotification", _) => __obj.despatchNotification foreach { x => attr = scala.xml.Attribute(null, "despatchNotification", x.toString, attr) }
        case ("@despatchSummaryId", _) => __obj.despatchSummaryId foreach { x => attr = scala.xml.Attribute(null, "despatchSummaryId", x.toString, attr) }
        case ("@driverCube", _) => __obj.driverCube foreach { x => attr = scala.xml.Attribute(null, "driverCube", x.toString, attr) }
        case ("@etaDate", _) => __obj.etaDate foreach { x => attr = scala.xml.Attribute(null, "etaDate", x.toString, attr) }
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@labelText", _) => __obj.labelText foreach { x => attr = scala.xml.Attribute(null, "labelText", x.toString, attr) }
        case ("@labelText_2", _) => __obj.labelText_2 foreach { x => attr = scala.xml.Attribute(null, "labelText_2", x.toString, attr) }
        case ("@labelText_3", _) => __obj.labelText_3 foreach { x => attr = scala.xml.Attribute(null, "labelText_3", x.toString, attr) }
        case ("@lastStatusDateTime", _) => __obj.lastStatusDateTime foreach { x => attr = scala.xml.Attribute(null, "lastStatusDateTime", x.toString, attr) }
        case ("@lock_seq", _) => __obj.lock_seq foreach { x => attr = scala.xml.Attribute(null, "lock_seq", x.toString, attr) }
        case ("@payerType", _) => __obj.payerType foreach { x => attr = scala.xml.Attribute(null, "payerType", x.toString, attr) }
        case ("@podSignatoryName", _) => __obj.podSignatoryName foreach { x => attr = scala.xml.Attribute(null, "podSignatoryName", x.toString, attr) }
        case ("@podSignature", _) => __obj.podSignature foreach { x => attr = scala.xml.Attribute(null, "podSignature", x.toString, attr) }
        case ("@publishedQcCode", _) => __obj.publishedQcCode foreach { x => attr = scala.xml.Attribute(null, "publishedQcCode", x.toString, attr) }
        case ("@quotationNumber", _) => __obj.quotationNumber foreach { x => attr = scala.xml.Attribute(null, "quotationNumber", x.toString, attr) }
        case ("@requestService", _) => __obj.requestService foreach { x => attr = scala.xml.Attribute(null, "requestService", x.toString, attr) }
        case ("@source", _) => __obj.source foreach { x => attr = scala.xml.Attribute(null, "source", x.toString, attr) }
        case ("@status", _) => __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
        case ("@totalQuantity", _) => __obj.totalQuantity foreach { x => attr = scala.xml.Attribute(null, "totalQuantity", x.toString, attr) }
        case ("@totalVolume", _) => __obj.totalVolume foreach { x => attr = scala.xml.Attribute(null, "totalVolume", x.toString, attr) }
        case ("@totalWeight", _) => __obj.totalWeight foreach { x => attr = scala.xml.Attribute(null, "totalWeight", x.toString, attr) }
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", x.toString, attr) }
        case ("@unitType", _) => __obj.unitType foreach { x => attr = scala.xml.Attribute(null, "unitType", x.toString, attr) }
        case ("@userName", _) => __obj.userName foreach { x => attr = scala.xml.Attribute(null, "userName", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_consignmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil},
        __obj.secondaryQcCode flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("secondaryQcCode"), __scope, false) },
        __obj.receiver map { scalaxb.toXML[org.birchavenue.startrack.Tp_partnerType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("receiver"), __scope, false) } getOrElse {Nil},
        __obj.sender map { scalaxb.toXML[org.birchavenue.startrack.Tp_partnerType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("sender"), __scope, false) } getOrElse {Nil},
        __obj.specialInstructions flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("specialInstructions"), __scope, false) },
        __obj.despatchLocationCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchLocationCode"), __scope, false) } getOrElse {Nil},
        __obj.references flatMap { scalaxb.toXML[org.birchavenue.startrack.ReferenceTypeType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("references"), __scope, false) },
        __obj.statusHistory flatMap { scalaxb.toXML[org.birchavenue.startrack.StatusHistoryType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("statusHistory"), __scope, false) },
        __obj.trackingEvents flatMap { scalaxb.toXML[org.birchavenue.startrack.ConsignmentTrackingEventType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("trackingEvents"), __scope, false) },
        __obj.lineItems flatMap { scalaxb.toXML[org.birchavenue.startrack.LineItemTypeType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("lineItems"), __scope, false) },
        __obj.dangerousGoods map { scalaxb.toXML[org.birchavenue.startrack.DGType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("dangerousGoods"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackTp_partnerTypeFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.Tp_partnerType] with scalaxb.CanWriteChildNodes[org.birchavenue.startrack.Tp_partnerType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.Tp_partnerType] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.startrack.Tp_partnerType((node \ "@addressLine1").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@addressLine2").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@addressLine3").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@country").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@postCode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@shortName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@state").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@suburb").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: org.birchavenue.startrack.Tp_partnerType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.addressLine1 foreach { x => attr = scala.xml.Attribute(null, "addressLine1", x.toString, attr) }
      __obj.addressLine2 foreach { x => attr = scala.xml.Attribute(null, "addressLine2", x.toString, attr) }
      __obj.addressLine3 foreach { x => attr = scala.xml.Attribute(null, "addressLine3", x.toString, attr) }
      __obj.country foreach { x => attr = scala.xml.Attribute(null, "country", x.toString, attr) }
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.postCode foreach { x => attr = scala.xml.Attribute(null, "postCode", x.toString, attr) }
      __obj.shortName foreach { x => attr = scala.xml.Attribute(null, "shortName", x.toString, attr) }
      __obj.state foreach { x => attr = scala.xml.Attribute(null, "state", x.toString, attr) }
      __obj.suburb foreach { x => attr = scala.xml.Attribute(null, "suburb", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_partnerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultStartrackTp_searchConsignmentTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_searchConsignmentType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    override def typeName: Option[String] = Some("tp_searchConsignmentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_searchConsignmentType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "source")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "status")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "type")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "serviceCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "etaDate")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "payerType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchLocationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "receiver")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "lastStatusDatetime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "podSignatoryName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "dangerousGoods")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      org.birchavenue.startrack.Tp_searchConsignmentType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[org.birchavenue.startrack.Tp_partnerType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_searchConsignmentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.source map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.status map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.typeValue map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("type"), __scope, false) } getOrElse {Nil},
        __obj.serviceCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("serviceCode"), __scope, false) } getOrElse {Nil},
        __obj.despatchDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchDate"), __scope, false) } getOrElse {Nil},
        __obj.etaDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("etaDate"), __scope, false) } getOrElse {Nil},
        __obj.payerType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("payerType"), __scope, false) } getOrElse {Nil},
        __obj.despatchLocationCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchLocationCode"), __scope, false) } getOrElse {Nil},
        __obj.receiver map { scalaxb.toXML[org.birchavenue.startrack.Tp_partnerType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("receiver"), __scope, false) } getOrElse {Nil},
        __obj.lastStatusDatetime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("lastStatusDatetime"), __scope, false) } getOrElse {Nil},
        __obj.podSignatoryName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("podSignatoryName"), __scope, false) } getOrElse {Nil},
        __obj.dangerousGoods map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("dangerousGoods"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackFault3Format extends scalaxb.ElemNameParser[org.birchavenue.startrack.Fault3] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Fault3] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_code")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_category")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_severity")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_timestamp")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_message")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_logicalComponentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_physicalComponentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_system")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_correlationId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "fs_faultPayload")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      org.birchavenue.startrack.Fault3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.FaultCategoryType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[org.birchavenue.startrack.FaultSeverityType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Fault3, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.fs_code map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_code"), __scope, false) } getOrElse {Nil},
        __obj.fs_category map { scalaxb.toXML[org.birchavenue.startrack.FaultCategoryType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_category"), __scope, false) } getOrElse {Nil},
        __obj.fs_severity map { scalaxb.toXML[org.birchavenue.startrack.FaultSeverityType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_severity"), __scope, false) } getOrElse {Nil},
        __obj.fs_timestamp map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_timestamp"), __scope, false) } getOrElse {Nil},
        __obj.fs_message map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_message"), __scope, false) } getOrElse {Nil},
        __obj.fs_logicalComponentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_logicalComponentId"), __scope, false) } getOrElse {Nil},
        __obj.fs_physicalComponentId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_physicalComponentId"), __scope, false) } getOrElse {Nil},
        __obj.fs_system map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_system"), __scope, false) } getOrElse {Nil},
        __obj.fs_correlationId map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_correlationId"), __scope, false) } getOrElse {Nil},
        __obj.fs_faultPayload map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("fs_faultPayload"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetConsignmentDetailRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetConsignmentDetailRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetConsignmentDetailRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "header")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentId")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.GetConsignmentDetailRequest(scalaxb.fromXML[org.birchavenue.startrack.TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetConsignmentDetailRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("header"), __scope, false),
        __obj.consignmentId flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentId"), __scope, false) })

  }

  trait DefaultStartrackGetConsignmentDetailResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetConsignmentDetailResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetConsignmentDetailResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignment")) ^^
      { case p1 =>
      org.birchavenue.startrack.GetConsignmentDetailResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.ConsignmentType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetConsignmentDetailResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.consignment flatMap { scalaxb.toXML[org.birchavenue.startrack.ConsignmentType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignment"), __scope, false) })

  }

  trait DefaultStartrackSearchConsignmentsRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.SearchConsignmentsRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.SearchConsignmentsRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "header")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "choice")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentType")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "serviceCode")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentStatus")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "receiver")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "sender")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "despatchLocationCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "dangerousGoodsOnly")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "pagination")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      org.birchavenue.startrack.SearchConsignmentsRequest(scalaxb.fromXML[org.birchavenue.startrack.TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ChoiceTypeType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[org.birchavenue.startrack.SearchConsignmentRequestType](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[org.birchavenue.startrack.PersonSearchType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[org.birchavenue.startrack.PersonSearchType](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.PaginationType](p10, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.SearchConsignmentsRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("header"), __scope, false),
        __obj.choice map { scalaxb.toXML[org.birchavenue.startrack.ChoiceTypeType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("choice"), __scope, false) } getOrElse {Nil},
        __obj.consignmentType map { scalaxb.toXML[org.birchavenue.startrack.SearchConsignmentRequestType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentType"), __scope, false) } getOrElse {Nil},
        __obj.serviceCode flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("serviceCode"), __scope, false) },
        __obj.consignmentStatus flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentStatus"), __scope, false) },
        __obj.receiver map { scalaxb.toXML[org.birchavenue.startrack.PersonSearchType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("receiver"), __scope, false) } getOrElse {Nil},
        __obj.sender map { scalaxb.toXML[org.birchavenue.startrack.PersonSearchType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("sender"), __scope, false) } getOrElse {Nil},
        __obj.despatchLocationCode flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("despatchLocationCode"), __scope, false) },
        __obj.dangerousGoodsOnly map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("dangerousGoodsOnly"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.startrack.PaginationType](__obj.pagination, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("pagination"), __scope, false))

  }

  trait DefaultStartrackSearchConsignmentsResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.SearchConsignmentsResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.SearchConsignmentsResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentSummary")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "pagination")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.SearchConsignmentsResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.SearchConsignmentType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.PaginationType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.SearchConsignmentsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.consignmentSummary flatMap { scalaxb.toXML[org.birchavenue.startrack.SearchConsignmentType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentSummary"), __scope, false) },
        scalaxb.toXML[org.birchavenue.startrack.PaginationType](__obj.pagination, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("pagination"), __scope, false))

  }

  trait DefaultStartrackTp_getConsignmentDetailRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_getConsignmentDetailRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_getConsignmentDetailRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "header")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentId")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.Tp_getConsignmentDetailRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_getConsignmentDetailRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("header"), __scope, false),
        __obj.consignmentId flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentId"), __scope, false) })

  }

  trait DefaultStartrackTp_getConsignmentDetailResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_getConsignmentDetailResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_getConsignmentDetailResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignment")) ^^
      { case p1 =>
      org.birchavenue.startrack.Tp_getConsignmentDetailResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.Tp_consignmentType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_getConsignmentDetailResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.consignment flatMap { scalaxb.toXML[org.birchavenue.startrack.Tp_consignmentType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignment"), __scope, false) })

  }

  trait DefaultStartrackTp_getFreightItemDetailRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_getFreightItemDetailRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_getFreightItemDetailRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "header")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "freightItemId")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.Tp_getFreightItemDetailRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_getFreightItemDetailRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("header"), __scope, false),
        __obj.freightItemId flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("freightItemId"), __scope, false) })

  }

  trait DefaultStartrackTp_getFreightItemDetailResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_getFreightItemDetailResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_getFreightItemDetailResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignment")) ^^
      { case p1 =>
      org.birchavenue.startrack.Tp_getFreightItemDetailResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.Tp_consignmentType](_, scalaxb.ElemName(node) :: stack) }: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_getFreightItemDetailResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.consignment flatMap { scalaxb.toXML[org.birchavenue.startrack.Tp_consignmentType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignment"), __scope, false) })

  }

  trait DefaultStartrackTp_searchConsignmentsRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_searchConsignmentsRequest] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_searchConsignmentsRequest] =
      phrase((scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "header")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "choice")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "pagination")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.Tp_searchConsignmentsRequest(scalaxb.fromXML[org.birchavenue.startrack.Tp_TransactionHeaderType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.Tp_choiceType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.startrack.PaginationType](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_searchConsignmentsRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.Tp_TransactionHeaderType](__obj.header, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("header"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.Tp_choiceType](__obj.choice, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("choice"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.PaginationType](__obj.pagination, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("pagination"), __scope, false))

  }

  trait DefaultStartrackTp_searchConsignmentsResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.Tp_searchConsignmentsResponse] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/actions/externals/Consignment/v1")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.Tp_searchConsignmentsResponse] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "consignmentSummary")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "pagination")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.Tp_searchConsignmentsResponse(p1.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.Tp_searchConsignmentType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.startrack.PaginationType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.Tp_searchConsignmentsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.consignmentSummary flatMap { scalaxb.toXML[org.birchavenue.startrack.Tp_searchConsignmentType](_, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("consignmentSummary"), __scope, false) },
        scalaxb.toXML[org.birchavenue.startrack.PaginationType](__obj.pagination, Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), Some("pagination"), __scope, false))

  }

  trait DefaultStartrackAccountTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.AccountType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Account/v1")
    
    override def typeName: Option[String] = Some("accountType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.AccountType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "number")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "businessUnit")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "billingAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "physicalAddress")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "certifiedAirFreightIndicator")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "riskWarrantyLevel")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "serviceCode")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "unitType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "status")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "alias")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "despatchFreightAllowed")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      org.birchavenue.startrack.AccountType(p1.headOption map { scalaxb.fromXML[BigInt](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.GetServiceCodeType](_, scalaxb.ElemName(node) :: stack) },
        p9.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.GetUnitTypeType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.AccountType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.number map { scalaxb.toXML[BigInt](_, Some("http://startrackexpress/Common/Account/v1"), Some("number"), __scope, false) } getOrElse {Nil},
        __obj.businessUnit map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("businessUnit"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.billingAddress map { scalaxb.toXML[org.birchavenue.startrack.AddressComplex](_, Some("http://startrackexpress/Common/Account/v1"), Some("billingAddress"), __scope, false) } getOrElse {Nil},
        __obj.physicalAddress map { scalaxb.toXML[org.birchavenue.startrack.AddressComplex](_, Some("http://startrackexpress/Common/Account/v1"), Some("physicalAddress"), __scope, false) } getOrElse {Nil},
        __obj.certifiedAirFreightIndicator map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("certifiedAirFreightIndicator"), __scope, false) } getOrElse {Nil},
        __obj.riskWarrantyLevel map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("riskWarrantyLevel"), __scope, false) } getOrElse {Nil},
        __obj.serviceCode flatMap { scalaxb.toXML[org.birchavenue.startrack.GetServiceCodeType](_, Some("http://startrackexpress/Common/Account/v1"), Some("serviceCode"), __scope, false) },
        __obj.unitType flatMap { scalaxb.toXML[org.birchavenue.startrack.GetUnitTypeType](_, Some("http://startrackexpress/Common/Account/v1"), Some("unitType"), __scope, false) },
        __obj.status map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("status"), __scope, false) } getOrElse {Nil},
        __obj.alias flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("alias"), __scope, false) },
        __obj.despatchFreightAllowed map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Account/v1"), Some("despatchFreightAllowed"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackCustomerTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.CustomerType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Account/v1")
    
    override def typeName: Option[String] = Some("customerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.CustomerType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "dgsAllowed")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "lock_seq")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "carrier")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "contactAddress")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.startrack.CustomerType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.CarrierComplex](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[org.birchavenue.startrack.AddressComplex](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.CustomerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.dgsAllowed map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Account/v1"), Some("dgsAllowed"), __scope, false) } getOrElse {Nil},
        __obj.lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("lock_seq"), __scope, false) } getOrElse {Nil},
        __obj.carrier flatMap { scalaxb.toXML[org.birchavenue.startrack.CarrierComplex](_, Some("http://startrackexpress/Common/Account/v1"), Some("carrier"), __scope, false) },
        __obj.contactAddress map { scalaxb.toXML[org.birchavenue.startrack.AddressComplex](_, Some("http://startrackexpress/Common/Account/v1"), Some("contactAddress"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackDespatchCustomerTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.DespatchCustomerType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Account/v1")
    
    override def typeName: Option[String] = Some("despatchCustomerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.DespatchCustomerType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "name")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "dgsAllowed")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "carrier")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.DespatchCustomerType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.toSeq map { scalaxb.fromXML[org.birchavenue.startrack.CarrierComplex](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.DespatchCustomerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.name map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("name"), __scope, false) } getOrElse {Nil},
        __obj.dgsAllowed map { scalaxb.toXML[Boolean](_, Some("http://startrackexpress/Common/Account/v1"), Some("dgsAllowed"), __scope, false) } getOrElse {Nil},
        __obj.carrier flatMap { scalaxb.toXML[org.birchavenue.startrack.CarrierComplex](_, Some("http://startrackexpress/Common/Account/v1"), Some("carrier"), __scope, false) })

  }

  trait DefaultStartrackGetServiceCodeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetServiceCodeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Account/v1")
    
    override def typeName: Option[String] = Some("getServiceCodeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetServiceCodeType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "code")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "lock_seq")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.GetServiceCodeType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetServiceCodeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.code map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("code"), __scope, false) } getOrElse {Nil},
        __obj.lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("lock_seq"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackGetUnitTypeTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.GetUnitTypeType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Account/v1")
    
    override def typeName: Option[String] = Some("getUnitTypeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.GetUnitTypeType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "unitType")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "lock_seq")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.GetUnitTypeType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.GetUnitTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.unitType map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("unitType"), __scope, false) } getOrElse {Nil},
        __obj.lock_seq map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("lock_seq"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackReceiverTypeType2Format extends scalaxb.ElemNameParser[org.birchavenue.startrack.ReceiverTypeType2] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Account/v1")
    
    override def typeName: Option[String] = Some("receiverType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ReceiverTypeType2] =
      phrase(rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Account/v1"), "name")) ^^
      { case p1 =>
      org.birchavenue.startrack.ReceiverTypeType2(p1.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@despatchLocationCode").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@despatchNotification").headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@id").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@shortName").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: org.birchavenue.startrack.ReceiverTypeType2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.despatchLocationCode foreach { x => attr = scala.xml.Attribute(null, "despatchLocationCode", x.toString, attr) }
      __obj.despatchNotification foreach { x => attr = scala.xml.Attribute(null, "despatchNotification", x.toString, attr) }
      __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
      __obj.shortName foreach { x => attr = scala.xml.Attribute(null, "shortName", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.startrack.ReceiverTypeType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.name flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Account/v1"), Some("name"), __scope, false) })

  }

  trait DefaultStartrackImageContentTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.ImageContentType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Imaging/v1")
    
    override def typeName: Option[String] = Some("imageContentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ImageContentType] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "base64Content")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "fileFormat")) ^^
      { case p1 ~ p2 =>
      org.birchavenue.startrack.ImageContentType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ImageContentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.base64Content map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("base64Content"), __scope, false) } getOrElse {Nil},
        __obj.fileFormat map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("fileFormat"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackImageTypableFormat extends scalaxb.XMLFormat[org.birchavenue.startrack.ImageTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.ImageTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://startrackexpress/Common/FreightProcessing/v1"), Some("imageType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.ImageTypeType](node, stack))
          case (Some("http://startrackexpress/Common/FreightDespatching/v1"), Some("imageType")) => Right(scalaxb.fromXML[org.birchavenue.startrack.ImageType](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.startrack.ImageTypeType2](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.startrack.ImageTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.startrack.ImageTypeType => scalaxb.toXML[org.birchavenue.startrack.ImageTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.ImageType => scalaxb.toXML[org.birchavenue.startrack.ImageType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.startrack.ImageTypeType2 => scalaxb.toXML[org.birchavenue.startrack.ImageTypeType2](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultStartrackImageTypeType2Format extends scalaxb.ElemNameParser[org.birchavenue.startrack.ImageTypeType2] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Imaging/v1")
    
    override def typeName: Option[String] = Some("imageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.ImageTypeType2] =
      phrase(opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "creationDateTime")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "description")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "imageContent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.startrack.ImageTypeType2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.startrack.ImageContentType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.ImageTypeType2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("id"), __scope, false) } getOrElse {Nil},
        __obj.creationDateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("creationDateTime"), __scope, false) } getOrElse {Nil},
        __obj.description map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("description"), __scope, false) } getOrElse {Nil},
        __obj.imageContent map { scalaxb.toXML[org.birchavenue.startrack.ImageContentType](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("imageContent"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultStartrackStoreImageTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.startrack.StoreImageType] {
    val targetNamespace: Option[String] = Some("http://startrackexpress/Common/Imaging/v1")
    
    override def typeName: Option[String] = Some("storeImageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.startrack.StoreImageType] =
      phrase((((scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "consignmentId")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "receiverName1")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "receiverName2")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "receiverAddressLine1")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "receiverAddressLine2")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "receiverAddressLine3")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "receiverAddressSuburb")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "quantityConsigned")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "deliveredQuantity")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "deliveryDateAndTime"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => org.birchavenue.startrack.StoreImageTypeSequence1(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p10, scalaxb.ElemName(node) :: stack)) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "deliveryCode")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "reason")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "receiverSignatoryName")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "recieverSignatureCoordinates")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "specialInstructions")) ~ 
      rep(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "senderReferences")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "signatureRequired")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "noManifestData")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "signedOnAttachment")) ~ 
      (scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "damaged"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => org.birchavenue.startrack.StoreImageTypeSequence2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        p5.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.toSeq map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p8, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p9, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p10, scalaxb.ElemName(node) :: stack)) }) ~ 
      ((opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "senderName")) ~ 
      opt(scalaxb.ElemName(Some("http://startrackexpress/Common/Imaging/v1"), "senderLocation"))) ^^ 
        { case p1 ~ p2 => org.birchavenue.startrack.StoreImageTypeSequence3(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.startrack.StoreImageType(p1,
        p2,
        p3) })
    
    def writesChildNodes(__obj: org.birchavenue.startrack.StoreImageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.startrack.StoreImageTypeSequence1](__obj.storeimagetypesequence1, None, Some("storeimagetypesequence1"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.StoreImageTypeSequence2](__obj.storeimagetypesequence2, None, Some("storeimagetypesequence2"), __scope, false),
        scalaxb.toXML[org.birchavenue.startrack.StoreImageTypeSequence3](__obj.storeimagetypesequence3, None, Some("storeimagetypesequence3"), __scope, false))

  }

  trait DefaultStartrackStoreImageTypeSequence1Format extends scalaxb.XMLFormat[org.birchavenue.startrack.StoreImageTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.StoreImageTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.startrack.StoreImageTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[String](__obj.consignmentId, Some("http://startrackexpress/Common/Imaging/v1"), Some("consignmentId"), __scope, false),
        __obj.receiverName1 map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("receiverName1"), __scope, false) } getOrElse {Nil},
        __obj.receiverName2 map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("receiverName2"), __scope, false) } getOrElse {Nil},
        __obj.receiverAddressLine1 map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("receiverAddressLine1"), __scope, false) } getOrElse {Nil},
        __obj.receiverAddressLine2 map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("receiverAddressLine2"), __scope, false) } getOrElse {Nil},
        __obj.receiverAddressLine3 map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("receiverAddressLine3"), __scope, false) } getOrElse {Nil},
        __obj.receiverAddressSuburb map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("receiverAddressSuburb"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.quantityConsigned, Some("http://startrackexpress/Common/Imaging/v1"), Some("quantityConsigned"), __scope, false),
        scalaxb.toXML[Int](__obj.deliveredQuantity, Some("http://startrackexpress/Common/Imaging/v1"), Some("deliveredQuantity"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.deliveryDateAndTime, Some("http://startrackexpress/Common/Imaging/v1"), Some("deliveryDateAndTime"), __scope, false))


  }

  trait DefaultStartrackStoreImageTypeSequence2Format extends scalaxb.XMLFormat[org.birchavenue.startrack.StoreImageTypeSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.StoreImageTypeSequence2] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.startrack.StoreImageTypeSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.deliveryCode map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("deliveryCode"), __scope, false) } getOrElse {Nil},
        __obj.reason map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("reason"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.receiverSignatoryName, Some("http://startrackexpress/Common/Imaging/v1"), Some("receiverSignatoryName"), __scope, false),
        scalaxb.toXML[String](__obj.recieverSignatureCoordinates, Some("http://startrackexpress/Common/Imaging/v1"), Some("recieverSignatureCoordinates"), __scope, false),
        __obj.specialInstructions flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("specialInstructions"), __scope, false) },
        __obj.senderReferences flatMap { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("senderReferences"), __scope, false) },
        scalaxb.toXML[Boolean](__obj.signatureRequired, Some("http://startrackexpress/Common/Imaging/v1"), Some("signatureRequired"), __scope, false),
        scalaxb.toXML[Boolean](__obj.noManifestData, Some("http://startrackexpress/Common/Imaging/v1"), Some("noManifestData"), __scope, false),
        scalaxb.toXML[Boolean](__obj.signedOnAttachment, Some("http://startrackexpress/Common/Imaging/v1"), Some("signedOnAttachment"), __scope, false),
        scalaxb.toXML[Boolean](__obj.damaged, Some("http://startrackexpress/Common/Imaging/v1"), Some("damaged"), __scope, false))


  }

  trait DefaultStartrackStoreImageTypeSequence3Format extends scalaxb.XMLFormat[org.birchavenue.startrack.StoreImageTypeSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.startrack.StoreImageTypeSequence3] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.startrack.StoreImageTypeSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.senderName map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("senderName"), __scope, false) } getOrElse {Nil},
        __obj.senderLocation map { scalaxb.toXML[String](_, Some("http://startrackexpress/Common/Imaging/v1"), Some("senderLocation"), __scope, false) } getOrElse {Nil})


  }


  trait OperationsEndpoint1Bindings { this: scalaxb.Soap11Clients =>
    lazy val targetNamespace: Option[String] = Some("http://startrack.com.au/ESB/Services/Concrete/External/Services/v1")
    lazy val service: org.birchavenue.startrack.Operations = new OperationsEndpoint1Binding {}
    def baseAddress = new java.net.URI("https://services.startrackexpress.com.au:443/DMZExternalService/InterfaceServices/ExternalOps.serviceagent/OperationsEndpoint1")

    trait OperationsEndpoint1Binding extends org.birchavenue.startrack.Operations {
      def getDepots(header: org.birchavenue.startrack.Tp_TransactionHeaderType, depotCode: Option[String], lastUpdated: Option[javax.xml.datatype.XMLGregorianCalendar]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.GetDepotsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.GetDepotsRequest(header, depotCode, lastUpdated), Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "getDepotsRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent//getDepots"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.GetDepotsResponse](body.headOption getOrElse {body}))
        }
      def getPickupCutoffTimes(header: org.birchavenue.startrack.TransactionHeaderType, pickupCutoffParameters: org.birchavenue.startrack.PickupCutoffTime): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.LocationCutoffTimeComplex] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.GetPickupCutoffTimesRequest(header, pickupCutoffParameters), Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "getPickupCutoffTimesRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent//getPickupCutoffTimes"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.GetPickupCutoffTimesResponse](body.headOption getOrElse {body}).pickupCutoffDetails)
        }
      def validateAddress(header: org.birchavenue.startrack.Tp_TransactionHeaderType, address: Option[org.birchavenue.startrack.AddressComplex]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.ValidateAddressResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.ValidateAddressRequest(header, address), Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "validateAddressRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent//validateAddress"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.ValidateAddressResponse](body.headOption getOrElse {body}))
        }
      def calculateEstimatedTime(header: org.birchavenue.startrack.TransactionHeaderType, senderLocation: org.birchavenue.startrack.ExtLocationDetailsType, receiverLocation: org.birchavenue.startrack.ExtLocationDetailsType, serviceCode: String, choice: org.birchavenue.startrack.ChoiceType, validateAddress: Option[Boolean]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.CalculateEstimatedTimeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.CalculateEstimatedTimeRequest(header, senderLocation, receiverLocation, serviceCode, choice, validateAddress), Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "calculateEstimatedTimeRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent/OperationsEndpoint1/calculateEstimatedTime"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.CalculateEstimatedTimeResponse](body.headOption getOrElse {body}))
        }
      def getLocations(header: org.birchavenue.startrack.Tp_TransactionHeaderType, locationDetails: org.birchavenue.startrack.LocationDetailsType, lastUpdated: Option[javax.xml.datatype.XMLGregorianCalendar]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.GetLocationsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.GetLocationsRequest(header, locationDetails, lastUpdated), Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "getLocationsRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent//getLocations"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.GetLocationsResponse](body.headOption getOrElse {body}))
        }
      def getNearestDepot(header: org.birchavenue.startrack.Tp_TransactionHeaderType, locationDetails: org.birchavenue.startrack.LocationDetailsType, lastUpdated: Option[javax.xml.datatype.XMLGregorianCalendar]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.GetNearestDepotResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.GetNearestDepotRequest(header, locationDetails, lastUpdated), Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "getNearestDepotRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent//getNearestDepot"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.GetNearestDepotResponse](body.headOption getOrElse {body}))
        }
      def searchConsignments(header: org.birchavenue.startrack.TransactionHeaderType, choice: Option[org.birchavenue.startrack.ChoiceTypeType], consignmentType: Option[org.birchavenue.startrack.SearchConsignmentRequestType], serviceCode: Seq[String], consignmentStatus: Seq[String], receiver: Option[org.birchavenue.startrack.PersonSearchType], sender: Option[org.birchavenue.startrack.PersonSearchType], despatchLocationCode: Seq[String], dangerousGoodsOnly: Option[Boolean], pagination: org.birchavenue.startrack.PaginationType): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.SearchConsignmentsResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.SearchConsignmentsRequest(header, choice, consignmentType, serviceCode, consignmentStatus, receiver, sender, despatchLocationCode, dangerousGoodsOnly, pagination), Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "searchConsignmentsRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent/OperationsEndpoint1/searchConsignments"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.SearchConsignmentsResponse](body.headOption getOrElse {body}))
        }
      def getConsignmentDetails(header: org.birchavenue.startrack.TransactionHeaderType, consignmentId: Seq[String]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.GetConsignmentDetailResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.GetConsignmentDetailRequest(header, consignmentId), Some("http://startrackexpress/Common/actions/externals/Consignment/v1"), "getConsignmentDetailRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent/OperationsEndpoint1/getConsignmentDetails"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.GetConsignmentDetailResponse](body.headOption getOrElse {body}))
        }
      def getServiceCodes(header: org.birchavenue.startrack.Tp_TransactionHeaderType, code: Option[String], lastUpdated: Option[javax.xml.datatype.XMLGregorianCalendar]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.GetServiceCodesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.GetServiceCodesRequest(header, code, lastUpdated), Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "getServiceCodesRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent//getServiceCodes"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.GetServiceCodesResponse](body.headOption getOrElse {body}))
        }
      def createPickupBooking(header: org.birchavenue.startrack.TransactionHeaderType, pickupBooking: org.birchavenue.startrack.PickupBookingTypeType): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.PickupBookingIdType] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.CreatePickupBookingRequest(header, pickupBooking), Some("http://startrackexpress/Common/actions/externals/Booking/v1"), "createPickupBookingRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent//createPickupBooking"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.CreatePickupBookingResponse](body.headOption getOrElse {body}).pickupBookingId)
        }
      def calculateCost(header: org.birchavenue.startrack.TransactionHeaderType, senderLocation: org.birchavenue.startrack.ExtLocationDetailsType, receiverLocation: org.birchavenue.startrack.ExtLocationDetailsType, serviceCode: String, noOfItems: BigInt, weight: BigDecimal, volume: BigDecimal, includeTransitWarranty: Option[Boolean], transitWarrantyValue: Option[BigDecimal], includeRiskWarranty: Option[Boolean], riskWarrantyValue: Option[BigDecimal], includeFuelSurcharge: Option[Boolean], includeSecuritySurcharge: Option[Boolean]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.CalculateCostResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.CalculateCostRequest(header, senderLocation, receiverLocation, serviceCode, noOfItems, weight, volume, includeTransitWarranty, transitWarrantyValue, includeRiskWarranty, riskWarrantyValue, includeFuelSurcharge, includeSecuritySurcharge), Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "calculateCostRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent/OperationsEndpoint1/calculateCost"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.CalculateCostResponse](body.headOption getOrElse {body}))
        }
      def getQCCodes(header: org.birchavenue.startrack.Tp_TransactionHeaderType, code: Option[String], lastUpdated: Option[javax.xml.datatype.XMLGregorianCalendar]): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.GetQCCodesResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.GetQCCodesRequest(header, code, lastUpdated), Some("http://startrackexpress/Common/actions/externals/MasterData/v1"), "getQCCodesRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent//getQCCodes"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.GetQCCodesResponse](body.headOption getOrElse {body}))
        }
      def calculateCostAndEstimatedTime(header: org.birchavenue.startrack.TransactionHeaderType, senderLocation: org.birchavenue.startrack.ExtLocationDetailsType, receiverLocation: org.birchavenue.startrack.ExtLocationDetailsType, serviceCode: String, noOfItems: BigInt, weight: BigDecimal, volume: BigDecimal, includeTransitWarranty: Option[Boolean], transitWarrantyValue: Option[BigDecimal], includeRiskWarranty: Option[Boolean], riskWarrantyValue: Option[BigDecimal], includeFuelSurcharge: Option[Boolean], includeSecuritySurcharge: Option[Boolean], choice: org.birchavenue.startrack.ChoiceType): Either[scalaxb.Soap11Fault[org.birchavenue.startrack.Fault], org.birchavenue.startrack.CalculateCostAndEstimatedTimeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.startrack.CalculateCostAndEstimatedTimeRequest(header, senderLocation, receiverLocation, serviceCode, noOfItems, weight, volume, includeTransitWarranty, transitWarrantyValue, includeRiskWarranty, riskWarrantyValue, includeFuelSurcharge, includeSecuritySurcharge, choice), Some("http://startrackexpress/Common/actions/externals/FreightCalculation/v1"), "calculateCostAndEstimatedTimeRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("/DMZExternalService/InterfaceServices/ExternalOps.serviceagent/OperationsEndpoint1/calculateCostAndEstimatedTime"))) match {
          case Left(x)  => Left(x.asFault[org.birchavenue.startrack.Fault])
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.startrack.CalculateCostAndEstimatedTimeResponse](body.headOption getOrElse {body}))
        }
    }
  }



}

